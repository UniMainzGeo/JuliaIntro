[{"url":"cheatsheets/","title":"Cheatsheets","tags":["welcome"],"text":"Cheatsheets Getting Started with Julia - live . Fastrack to Julia  cheatsheet. MATLAB-Julia-Python comparative cheatsheet  by  QuantEcon group Plots.jl cheatsheet"},{"url":"clips/","title":"clips","tags":[],"text":"Submit A Short Clip Did you have a favorite (or many favorite) 1-2 minute clips from one of the lectures in this course? Consider sending them to us and that way we can share them on Twitter so more people can get exposure to computational thinking. Use  this form  to upload clips."},{"url":".","title":"index","tags":["homepage"],"text":""},{"url":"installation/","title":"Software installation","tags":["welcome"],"text":"First-time setup: Install Julia & Pluto Text and pictures version: Step 1: Install Julia  1.9.0 Go to  https://julialang.org/downloads  and download the current stable release, Julia  1.9.0 , using the correct version for your operating system (Linux x86, Mac, Windows, etc). Step 2: Run Julia After installing,  make sure that you can run Julia . On some systems, this means searching for the “Julia  1.9.0 ” program installed on your computer; in others, it means running the command  julia  in a terminal. Make sure that you can execute  1 + 1 : Make sure that you are able to launch Julia and calculate  1+1  before proceeding! Step 3: Install  Pluto Next we will install the  Pluto , the notebook environment that we will be using during the course. Pluto is a Julia  programming environment  designed for interactivity and quick experiments. Open the  Julia REPL . This is the command-line interface to Julia, similar to the previous screenshot. Here you type  Julia commands , and when you press ENTER, it runs, and you see the result. To install Pluto, we want to run a  package manager command . To switch from  Julia  mode to  Pkg  mode, type  ]  (closing square bracket) at the  julia>  prompt: \njulia> ]\n\n(@v 1.9 ) pkg>\n The line turns blue and the prompt changes to  pkg> , telling you that you are now in  package manager mode . This mode allows you to do operations on  packages  (also called libraries). To install Pluto, run the following (case sensitive) command to  add  (install) the package to your system by downloading it from the internet.\nYou should only need to do this  once  for each installation of Julia: \n(@v 1.9 ) pkg> add Pluto\n This might take a couple of minutes, so you can go get yourself a cup of tea! You can now close the terminal. Step 4: Use a modern browser: Mozilla Firefox or Google Chrome We need a modern browser to view Pluto notebooks with. Firefox and Chrome work best. Second time:  Running Pluto & opening a notebook Repeat the following steps whenever you want to work on a project or homework assignment. Step 1: Start Pluto Start the Julia REPL, like you did during the setup. In the REPL, type: julia> using Pluto\n\njulia> Pluto.run()\n The terminal tells us to go to  http://localhost:1234/  (or a similar URL). Let’s open Firefox or Chrome and type that into the address bar. If you’re curious about what a  Pluto notebook  looks like, have a look at the  Featured Notebooks . These notebooks are useful for learning some basics of Julia programming. If you want to hear the story behind Pluto, have a look a the  JuliaCon presentation . If nothing happens in the browser the first time, close Julia and try again. And please let us know! Step 2a: Opening a notebook from the web This is the main menu - here you can create new notebooks, or open existing ones. Our homework assignments will always be based on a  template notebook , available in this GitHub repository. To start from a template notebook on the web, you can  paste the URL into the blue box  and press ENTER. For example, homework 0 is available  here . Go to this page, and on the top right, click on the button that says “Edit or run this notebook”. From these instructions, copy the notebook link, and paste it into the box. Press ENTER, and select OK in the confirmation box. The first thing we will want to do is to save the notebook somewhere on our own computer; see below. Step 2b: Opening an existing notebook file When you launch Pluto for the second time, your recent notebooks will appear in the main menu. You can click on them to continue where you left off. If you want to run a local notebook file that you have not opened before, then you need to enter its  full path  into the blue box in the main menu. More on finding full paths in step 3. Step 3: Saving a notebook We first need a folder to save our homework in. Open your file explorer and create one. Next, we need to know the  absolute path  of that folder. Here’s how you do that in  Windows ,  MacOS  and  Ubuntu . For example, you might have: C:\\Users\\fons\\Documents\\18S191_assignments\\  on Windows /Users/fons/Documents/18S191_assignments/  on MacOS /home/fons/Documents/18S191_assignments/  on Ubuntu Now that we know the absolute path, go back to your Pluto notebook, and at the top of the page, click on  “Save notebook…” . This is where you type the  new path+filename for your notebook : Click  Choose . Step 4: Sharing a notebook After working on your notebook (your code is autosaved when you run it), you will find your notebook file in the folder we created in step 3. This the file that you can share with others, or submit as your homework assignment to Canvas. \nconst run = f => f();\nrun(async () => {\nconst versions = await (await fetch(`https://julialang-s3.julialang.org/bin/versions.json`)).json()\nconst version_names = Object.keys(versions).sort().reverse()\nconst stable = version_names.find(v => versions[v].stable)\nconsole.log({stable})\nconst pkg_stable = /\\d+\\.\\d+/.exec(stable)[0]\ndocument.querySelectorAll(\"auto-julia-version\").forEach(el => {\n    console.log(el)\n    el.innerText = el.getAttribute(\"short\") == null ? stable : pkg_stable\n})\n});"},{"url":"search/","title":"Search results","tags":[],"text":"window.init_search(); Search Results \nLoading..."},{"url":"sidebar data/","title":"sidebar data","tags":[],"text":"Dict \"main\" \"Welcome\" collections \"welcome\" .pages, \"Module 1 GeophysicalModelGenerator.jl\" collections \"module1\" .pages, \"Module 2 Social Science & Data Science\" collections \"module2\" .pages, \"Module 3 Climate Science\" collections \"module3\" .pages, , "},{"url":"structure/","title":"structure","tags":[],"text":""},{"url":"test/","title":"Introduction","tags":["welcome"],"text":" A Pluto.jl notebook v0.19.25 frontmatter title \"Introduction\" tags \"welcome\" license \"MIT\" description \"This is the first step towards programming in Julia\" layout \"layout.jlhtml\" using Markdown using InteractiveUtils begin using Colors, ColorVectorSpace, ImageShow, FileIO, ImageIO using PlutoUI using PlutoTeachingTools using Printf using HypertextLiteral end md\" Introduction to Julia by AG Geophysik at the University of Mainz\" md\" DISCLAIMER This webpage is a work in progress and if you got recommendations, feel free to email us mailto paellig uni mainz.de \\ Furthermore, this Introduction was inspired by the MIT Computational Thinking class and Marcel Thielmanns's course on the Geophysical Model Generator Uni Bayreuth\" md\" 1. Introduction\" md\"The Julia scientific programming language is fast, completely open source and comes with a nice package manager. It works on essentially all systems and has an extremely active user base. Programming in Julia is fairly easy and comparable to programming in MATLAB. If you have experience in MATLAB programming, transitioning to Julia should be relatively smooth.\" md\"In this course you will learn how to use Julia from simple coding exercises to get familiar with the structure of Julia to interactive geodynamical programming using LaMeM and other packages developed by the AG Geophysik at the University of Mainz\" TableOfContents title \"Introduction to Julia by AG Geophysik at the University of Mainz\", indent true, depth 4, aside true md\" 1.1 Installation of Julia\" md\" Step 1 Download Julia Go to https julialang.org downloads https julialang.org downloads and download the current stable release, using the correct version for your operating system Linux x86, Mac, Windows, etc . Additionally, we rely on Microsoft Visual Studio Code https code.visualstudio.com as a debugger and visualisation tool. After downloading both Julia and VS Code, make sure to also install the Julia Language extension within VS Code. See here https code.visualstudio.com docs languages julia for help when setting it up. Step 2 Run Julia After installing, make sure that you can run Julia . On some systems, this means searching for the program installed on your computer in others, it means running the command `julia` in a terminal. Make sure that you can execute `1 1`\" md\" Basic operations Julia is a scientific programming language, which means that it is designed to be used for mathematical operations. Try out the following operations \" 1 1 try for yourself 3 4 3^2 md\"Powers are performed before divisions and multiplications, which are done before subtraction and addition\" 2 4 5^2 md\"In VS Code you can also use the 'command line editiing' tool that allows you to go up and down with the keyboard arrows. Which can safe quite some time for long calculations, such as above\" 2 4 5^2 2 md\" In Julia use the equal sign to assign values to variables. This should be known from other programming languages.\" x 1 1 md\"To find out what the type of a certain variable is, type \" typeof x md\"What type will you get for x if it has decimals?\" a 2.1 typeof a begin c 10 b c 100 end hint text Markdown.MD Markdown.Admonition \"hint\", \"Hint\", text if b 1000 hint md\"CONGRATS\" else print \"Try again\" end "},{"url":"homework/hw0/","title":"hw0","tags":[],"text":" A Pluto.jl notebook v0.19.25 using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end using Compose using PlutoUI md\" Homework 0, version 4\" md\"\"\" Homework 0 Getting up and running First of all, welcome to the course We are excited to teach you about real world applications of scientific computing, using the same tools that we work with ourselves. This first homework is a little mic check. We'd like all MIT students to submit this zeroth homework assignment . It will not affect your grade, but it will help us get everything running smoothly when the course starts. If you're stuck or don't have much time, just fill in your name and ID and submit 🙂 \"\"\" md\"\"\" Homework Logistics Homeworks are in the form of Pluto notebooks https plutojl.org . Your must complete them and submit them on Canvas if you are an MIT student. . If you are not an MIT student, we encourage you to join Discord https discord.gg Z5qnVf8 and find someone to cross grade. HW0 is for you to get your system set up correctly and to test our grading software. You must submit it but it will not count towards your grade. \"\"\" md\" Requirements of this HW0 Install Julia and set up Pluto Do the required Exercise 0. That’s it, but if you like you can do the OPTIONAL exercises that follow.\" md\"\"\" Installation Before being able to run this notebook successfully locally, you will need to set up Julia and Pluto. Spring21 installation One you have Julia and Pluto installed, you can click the button at the top right of this page and follow the instructions to edit this notebook locally and submit. \"\"\" md\" Required Exercise 0 Making a basic function Computing the square of a number is easy you just multiply it with itself. Algorithm Given x Output x^2 1. Multiply `x` by `x`\" function basic square x return 1 this is wrong, write your code here end let result basic square 5 if result isa Number md\"\"\" warning \"Not a number\" `basic square` did not return a number. Did you forget to write `return`? \"\"\" elseif abs result 5 5 0.01 md\"\"\" correct Well done \"\"\" else md\"\"\" warning \"Incorrect\" Keep working on it \"\"\" end end md\"That's all that's required for this week. Please submit the notebook. We just wanted to make sure that you're up and running. If you want to explore further, we have included a few optional exercises below.\" md\" Optional Exercise 1 Square root by Newton's method Computing the square of a number is easy you already did it. But how does one compute the square root of a number? Algorithm Given x Output \\sqrt x 1. Take a guess `a` 1. Divide `x` by `a` 1. Set a the average of `x a` and `a`. The square root must be between these two numbers. Why? 1. Repeat until `x a` is roughly equal to `a`. Return `a` as the square root. In general, you will never get to the point where `x a` is exactly equal to `a`. So if our algorithm keeps going until `x a a`, then it will get stuck. So instead, the algorithm takes a parameter `error margin`, which is used to decide when `x a` and `a` are close enough to halt. \" md\" Exercise 1.1 Step 3 in the algorithm sets the new guess to be the average of `x a` and the old guess `a`. This is because the square root must be between the numbers `x a` and `a`. Why? \" ex 1 1 md\"\"\" your answer here \"\"\" you might need to wait until all other cells in this notebook have completed running. scroll down the page to see what's up if isdefined ex 1 1 md\"\"\"Do not change the name of the variable write you answer as `ex 1 1 \"...\"`\"\"\" end md\" Exercise 1.2 Write a function newton sqrt x which implements the above algorithm.\" function newton sqrt x, error margin 0.01, a x 2 a x 2 is the default value of `a` return x this is wrong, write your code here end newton sqrt 2 let result newton sqrt 2, 0.01 if result isa Number md\"\"\" warning \"Not a number\" `newton sqrt` did not return a number. Did you forget to write `return`? \"\"\" elseif abs result sqrt 2 0.01 md\"\"\" correct Well done \"\"\" else md\"\"\" warning \"Incorrect\" Keep working on it \"\"\" end end md\"\"\" hint `abs r s ` is the distance between `r` and `s` \"\"\" md\"\"\" hint If you're stuck, feel free to cheat, this is homework 0 after all 🙃 Julia has a function called `sqrt` \"\"\" md\" Optional Exercise 2 Sierpinksi's triangle Sierpinski's triangle is defined recursively Sierpinski's triangle of complexity N is a figure in the form of a triangle which is made of 3 triangular figures which are themselves Sierpinski's triangles of complexity N 1. A Sierpinski's triangle of complexity 0 is a simple solid equilateral triangle \" md\"To draw Sierpinski's triangle, we are going to use an external package, Compose.jl https giovineitalia.github.io Compose.jl latest tutorial . Let's import it A package contains a coherent set of functionality that you can often use a black box according to its specification. There are lots of Julia packages https juliahub.com ui Home . \" md\"Just like the definition above, our `sierpinksi` function is recursive it calls itself.\" complexity 3 if complexity 3 md\"\"\" Try changing the value of `complexity` to `5` in the cell above. Hit `Shift Enter` to affect the change. \"\"\" else md\"\"\" Great As you can see, all the cells in this notebook are linked together by the variables they define and use. Just like a spreadsheet \"\"\" end md\" Exercise 2.1 As you can see, the total area covered by triangles is lower when the complexity is higher.\" md\"\"\" Can you write a function that computes the area of `sierpinski n ` , as a fraction of the area of `sierpinski 0 `? So ``` area sierpinski 0 1.0 area sierpinski 1 0.?? ... ``` \"\"\" function area sierpinski n return 1.0 end if area sierpinski 0 1.0 && area sierpinski 1 3 4 md\"\"\" correct Well done \"\"\" else md\"\"\" warning \"Incorrect\" Keep working on it \"\"\" end md\" Let's try it out below \" md\"Complexity bind n Slider 0 6, show value true \" md\"\"\" hint Can you write `area sierpinksi n ` as a function of `area sierpinski n 1 `? \"\"\" md\"That's it for now, see you next week \" triangle compose context , polygon 1, 1 , 0, 1 , 1 2, 0 It does not matter which order you define the building blocks functions of the program in. The best way to organize code is the one that promotes understanding. function place in 3 corners t Uses the Compose library to place 3 copies of t in the 3 corners of a triangle. treat this function as a black box, or learn how it works from the Compose documentation here https giovineitalia.github.io Compose.jl latest tutorial Compose is declarative 1 compose context , context 1 4, 0, 1 2, 1 2 , t , context 0, 1 2, 1 2, 1 2 , t , context 1 2, 1 2, 1 2, 1 2 , t end function sierpinski n if n 0 triangle else t sierpinski n 1 recursively construct a smaller sierpinski's triangle place in 3 corners t place it in the 3 corners of a triangle end end sierpinski complexity sierpinski. 0 6 md\"\"\" Sierpinski's triangle of complexity n sierpinski n has area area sierpinski n \"\"\" "},{"url":"images_abstractions/abstraction/","title":"Abstraction","tags":["lecture","module1","track_julia","track_math"],"text":" A Pluto.jl notebook v0.19.25 frontmatter chapter 1 video \"https www.youtube.com watch?v 3zTO3LEY cM\" image \"\" section 2 order 2 title \"Abstraction\" layout \"layout.jlhtml\" youtube id \"3zTO3LEY cM\" description \"\" tags \"lecture\", \"module1\", \"track julia\", \"track math\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end begin using PlutoUI using ImageShow, FileIO, ImageIO end PlutoUI.TableOfContents aside true md\"\"\" Initializing packages When running this notebook for the first time, this could take up to 15 minutes. Hang in there \"\"\" md\" Introduction The goal of this section is to introduce you to the notion of abstraction. You can think of abstraction as an opposite to specialization. We will illustrate this by looking at the following example. What is one ? Before we get lost talking about the foundations of number theory, I will present you with a few examples that represent one to me. \" md\"Each of the items in this list is a specific, or specialized representation of one 1. as an integer 1. as a float 1. as a string 1. as a rational number 1. as a cute picture 1. as an 2x2 identity matrix 1. as a singular dog Of course, these are just a few examples of one . People have been representing one for ages in different languages, scripts, artistic expression, etc. The difference between these ones to me is clear. In fact, I just articulated it to you. Now, let's turn to how a computer sees one differently based on what I type. \" md\"So to a computer, all of these are different types.\" md\" What is a collection of one s? Now, I want to make a collection of ones for some reason. Below is a way for you to experiment building this collection with different one s. As you do this experiment, I want you to look at what stays in the same in the Julia output, and what doesn't.\" md\"\"\" Before we even look at the output, I am amazed that this code even ran. Are you telling me that the computer doesn't care which one I am using in my array? Yes That's exactly what abstraction is. By stepping back, we can now think and operate at a level that doesn't care about which specific one I am using. This is what we mean by abstraction is the opposite of specialization . The information that Julia gives back is quite informative. Here is an example of the first line of the output for a few different types ``` array 3x4 Array Int64, 2 array 3x4 Array Float64, 2 array 3x4 Array Rational Int64 , 2 ``` Notice that for all of these, we have the same `3x4 Array , 2 `. \"\"\" md\"\"\" First Taste of Abstraction Now, I want to do something to a collection of ones, that doesn't care about which one I'm using. So I'm going to write a function that takes in my collection, and add a corgi whereever I desire. \"\"\" function insert new, A, i, j B copy A B i,j new return B end begin A fill 0, 3, 4 md\"\"\" bind i Slider 1 size A,1 , show value true bind j Slider 1 size A,2 , show value true \"\"\" end begin one number array fill 1,3,4 insert 5, one number array, i, j end md\"This is still amazing. I wrote one function that just cares about how to insert an object into an array, without knowing anything about what's inside, and it worked for two completely different arrays, collections of ones of any kind .\" md\" Conclusion The key idea here is that a computer language should allow you to do operations that make sense. Often times, an operation can make sense for many different objects. So we can abstract away the specifics of the object in our implementation. It should let you step back from there. \" md\"\"\" Appendix \"\"\" begin oneimage load download \"https user images.githubusercontent.com 6933510 199281680 5ac1e8ea c68c 4fb5 a3bf b47ad28057d1.png\" corgi load download \"https user images.githubusercontent.com 6933510 107239146 dcc3fd00 6a28 11eb 8c7b 41aaf6618935.png\" nothing end one 1, 1.0, \"one\", 1 1, oneimage, 1 0 0 1 , corgi, computer ones typeof. one begin one keys \"1\", \"1.0\", \"one\", \"1 1\", \"Cute One\", \"2x2 Identity\", \"One Corgi\" selections one keys . one keys lookup element Dict one keys . one md\" bind element key Select selections \" end your chosen one element lookup element element key its type typeof element a 3x4 array of this one. array fill element,3,4 begin one image array fill oneimage,3,4 insert corgi, one image array, i, j end "},{"url":"images_abstractions/dynamicprograms/","title":"Dynamic Programming","tags":["lecture","module1","optimization","programming","track_julia","track_math","interactive","discrete","lazy"],"text":" A Pluto.jl notebook v0.19.25 frontmatter chapter 1 video \"https www.youtube.com watch?v KyBXJV1zFlo\" image \"https user images.githubusercontent.com 6933510 136196599 c6ae60f0 9269 4134 bb0d 5bcab928bd2b.gif\" section 7 order 7 title \"Dynamic Programming\" layout \"layout.jlhtml\" youtube id \"KyBXJV1zFlo\" description \"\" tags \"lecture\", \"module1\", \"optimization\", \"programming\", \"track julia\", \"track math\", \"interactive\", \"discrete\", \"lazy\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end begin import ImageIO using Plots, PlutoUI, Colors, Images end md\"\"\" What is dynamic programming? The word \"programming\" here is a rather archaic word but still in use for an optimization problem , as used, for example, in the phrase \"linear programming.\" Probably the word \"programming\" should be abandoned in this context, but no doubt it is too late. \"\"\" md\"\"\" Summing over paths problem \"\"\" md\"\"\" Let's start by looking at the following problem. Given a matrix, we follow a path from top to bottom. The paths start at one of the square on the top, and can only go downwards, either South East , South , or South West . We will add up the numbers visited along each path. Our goal is to find the path that has the smallest sum . This is indeed an optimization problem in the set of all possible paths, we want to find a path that minimizes the sum of visited squares. \"\"\" md\"\"\" Try it yourself \"\"\" md\"\"\" Board size \"\"\" const n 8 M rand 0 9, n, n md\"\"\" One way to solve this problem is the naive algorithm where we enumerate all the paths, calculate the sum for each, and take the minimum. However, as the matrix gets larger the total number of paths grows exponentially . \"\"\" md\"\"\" Possible research problem Investigate the statistics of the sums over all possible paths. \"\"\" md\"\"\" Fixing a single point on a path \"\"\" md\"\"\" Let's fix a given point i, j and focus only on all those paths that pass through i, j . \"\"\" md\"\"\" i bind fixi Scrubbable 1 n j bind fixj Scrubbable 1 n \"\"\" md\"\"\" Suppose we fix the point on the penultimate row last but one . When we look at the paths below the fixed value, we're doing the same calculation over and over again. It doesn't seem sensible to keep re doing these calculations. The same holds as we move the fixed point further upwards. So instead of calculating by working \"forwards\", for each box we look at the minimum below it. \"\"\" md\"\"\" The idea of overlapping subproblems \"\"\" md\"\"\" The key point in this problem is that there are overlapping subproblems there are calculations that we don't need to repeat. The idea of dynamic programming is to remember the solution of those subproblems to get an exponential speed up in the calculation speed. \"\"\" begin struct Paths m Int n Int end Base.iterate p Paths fill 1,p.m , fill 1,p.m start the iteration with 1's Base.IteratorSize Type Paths Base.SizeUnknown function Base.iterate p Paths, state if state ≠ fill p.n,p.m end when each row has an n newstate next state,p.n return newstate, newstate end end function next path,n k length path start from the end and find the first element that can be updated by adding 1 while k≥2 && path k n || path k 1 path k 1 1 k 1 end path k 1 add the one then reset the following elements for j k 1 length path path j max path j 1 1,1 end return path end function allpaths m,n Vector Int copy p for p in Paths m,n end end begin paths allpaths n,n numpaths length paths md\"There are numpaths paths to check.\" end md\"\"\" Path bind whichpath Slider 1 numpaths show value true \"\"\" fixedpaths p for p∈paths if p fixi fixj begin number of fixedpaths length fixedpaths md\"Number of fixed paths number of fixedpaths\" end md\"\"\" Path bind whichfixedpath Slider 1 number of fixedpaths show value true \"\"\" md\"\"\" Summing Paths Demo \"\"\" begin winnernum argmin sum M i,p i for i 1 n for p∈paths winner paths winnernum winnertotal sum M i,winner i for i 1 n end md\"\"\" Our goal is to add the numbers on a path and find the minimal path. The winner is number winnernum. \"\"\" md\"\"\" Appendix \"\"\" function setup board M n size M,1 rectangle w, h, x, y Shape x . 0,w,w,0 , y . 0,0,h,h p plot the board for i 1 n, j 1 n if rem i j,2 0 plot p, rectangle 1,1,i,j , opacity .2, color red end end for i 1 n, j 1 n annotate p, j .5 ,n 2 i .5 , M i,j end plot p, legend false, aspectratio 1, xlims 1,n 1 , ylims 1,n 1 , axis nothing return p end rectangle w, h, x, y Shape x . 0,w,w,0 , y . 0,0,h,h function draw path p, path, indices 1 n kwargs... draw the line plot p, path indices . .5, n 1 . indices . .5 linewidth 4, kwargs... add little squares as background for the number in a square for j in n 1 . indices i path 1 n j plot p, rectangle .4,.4,i .3,j .3 , opacity 1, color RGB 0,1,0 , linewidth 0,fillcolor ifelse rem i j,2 0, RGBA 1,.85,.85,.2 , white end p end path text values \" join values, \" \" sum values \" let path fixedpaths whichfixedpath values M i,path i for i 1 n p setup board M annotate p, fixj .5 ,n 2 fixi .5 , M fixi,fixj , red draw path p, path, 1 fixi color black draw path p, path, fixi n color blue plot p title path text values end function viz whichpath path paths whichpath values M i,path i for i 1 n nv length values rectangle w, h, x, y Shape x . 0,w,w,0 , y . 0,0,h,h p setup board M The winning path draw path p, winner color RGB 1,.6,.6 , your path draw path p, path color black, text plot p, title path text values plot p, xlabel path text M i,winner i for i 1 n , xguidefontcolor RGB 1,.5,.5 p end viz whichpath "},{"url":"images_abstractions/images/","title":"Images as Data and Arrays","tags":["lecture","module1","philip","track_julia","matrix","image"],"text":" A Pluto.jl notebook v0.19.25 frontmatter chapter 1 video \"https www.youtube.com watch?v 3zTO3LEY cM\" image \"https user images.githubusercontent.com 6933510 136196634 2294d0a7 e79a 40d0 bbb8 81da70f4d398.png\" section 1 order 1 title \"Images as Data and Arrays\" layout \"layout.jlhtml\" youtube id \"3zTO3LEY cM\" description \"\" tags \"lecture\", \"module1\", \"philip\", \"track julia\", \"matrix\", \"image\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end begin using Colors, ColorVectorSpace, ImageShow, FileIO, ImageIO using PlutoUI using PlutoTeachingTools using HypertextLiteral end PlutoUI.TableOfContents aside true md\"\"\" Initializing packages When running this notebook for the first time, this could take up to 15 minutes. Hang in there \"\"\" md\"\"\" Images as examples of data all around us Welcome to the Computational Thinking using Julia for Real World Problems, at MIT in Spring 2021 The aim of this course is to bring together concepts from computer science and applied math with coding in the modern Julia language , and to see how to apply these techniques to study interesting applications and of course to have fun . We would be pleased if students who have been interested in computer science now become interested in computational science and those interested in scientific applications learn computer science they may not see elsewhere. ... and for all students, we wish to share the value of the Julia language as the best of both worlds. \"\"\" md\"\"\" Alan's Essay Are all programming languages the same? Superficially, many programming languages are very similar. \"Showoffs\" will compare functional programming vs imperative programming. Others will compare compiled languages vs dynamic languages. I will avoid such fancy terms in this little essay, preferring to provide this course's pedagogical viewpoint. Generally speaking beginning programmers should learn to create \"arrays\" write \"for loops\", \"conditionals\", \"comparisons\", express mathematical formulas, etc. So why Julia at a time when Python seems to be the language of teaching, and Java and C so prominent in the corporate world? As you might imagine, we believe Julia is special. Oh you will still have the nitty gritty of when to use a bracket and a comma. You might have strong opinions as to whether arrays should begin with 0 or 1 joke some say it's time to compromise and use ½. Getting past these irrelevant issues, you will begin to experience one by one what makes Julia so very special. For starters, a language that runs fast is more fun. We can have you try things that would just be so slow in other languages it would be boring. We also think you will start to notice how natural Julia is, how it feels like the mathematics, and how flexible it can be. Getting to see the true value of fancy terms like multiple dispatch, strong typing, generic programming, and composable software will take a little longer, but stick with us, and you too will see why Julia is so very special. \"\"\" md\"\"\" Computer Science and Computational Science Working Together \"\"\" md\"\"\" Applications of computer science in the real world use data , i.e. information that we can measure in some way. Data take many different forms, for example Numbers that change over time time series Stock price each second minute day Weekly number of infections Earth's global average temperature Video The view from a window of a self driving car A hurricane monitoring station Ultrasound e.g. prenatal Images Diseased versus healthy tissue in a medical scan Pictures of your favourite dog \"\"\" md\"\"\" Exercise Think of another two examples in each category. Can you think of other categories of data? \"\"\" md\"\"\" Computational science can be summed up by a simplified workflow \"\"\" md\"\"\" data ⟶ input ⟶ process ⟶ model ⟶ visualize ⟶ output \"\"\" md\"\"\" html\" br \" To use any data source, we need to input the data of interest, for example by downloading it, reading in the resulting file, and converting it into a form that we can use in the computer. Then we need to process it in some way to extract information of interest. We usually want to visualize the results, and we may want to output them, for example by saving to disc or putting them on a website. We often want to make a mathematical or computational model that can help us to understand and predict the behavior of the system of interest. In this course we aim to show how programming, computer science and applied math combine to help us with these goals. \"\"\" md\"\"\" Data Images as an example of data Let's start off by looking at images and how we can process them. Our goal is to process the data contained in an image in some way, which we will do by developing and coding certain algorithms . Here is the the Fall 2020 version of this lecture small variations by 3 Blue 1 Brown Grant Sanderson for your reference. \"\"\" html\"\"\" script src \"https cdn.jsdelivr.net npm lite youtube embed 0.2.0 src lite yt embed.js\" integrity \"sha256 wwYlfEzWnCf2nFlIQptfFKdUmBeH5d3G7C2352FdpWE \" crossorigin \"anonymous\" defer script link rel \"stylesheet\" href \"https cdn.jsdelivr.net npm lite youtube embed 0.2.0 src lite yt embed.css\" integrity \"sha256 99PgDZnzzjO63EyMRZfwIIA i OS2wDx6k 9Eo7JDKo \" crossorigin \"anonymous\" lite youtube videoid DGojI9xcCfg params \"modestbranding 1&rel 0\" lite youtube \"\"\" md\"\"\" If we open an image on our computer or the web and zoom in enough, we will see that it consists of many tiny squares, or pixels \"picture elements\" . Each pixel is a block of one single colour, and the pixels are arranged in a two dimensional square grid. You probably already know that these pixels are stored in a computer numerically perhaps in some form of RGB red,green,blue format. This is the computer's representation of the data. Note that an image is already an approximation of the real world it is a two dimensional, discrete representation of a three dimensional reality. \"\"\" md\"\"\" Input and Visualize loading and viewing an Image in Julia \"\"\" md\"\"\" Let's use Julia to load actual images and play around with them. We can download images from the internet, your own file, or your own webcam. \"\"\" md\"\"\" Downloading an image from the internet or a local file We can use the `Images.jl` package to load an image file in three steps. \"\"\" md\"\"\" Step 1 from internet we specify the URL web address to download from html\" br \" note that Pluto places results before commands because some people believe output is more interesting than code. This takes some getting used to. \"\"\" url \"https user images.githubusercontent.com 6933510 107239146 dcc3fd00 6a28 11eb 8c7b 41aaf6618935.png\" md\"\"\" Step 2 Now we use the aptly named `download` function to download the image file to our own computer. Philip is Prof. Edelman's corgi. \"\"\" philip filename download url download to a local file. The filename is returned md\"\"\" Step 3 Using the `Images.jl` package loaded at the start of this notebook scroll up and take a look. we can load the file, which automatically converts it into usable data. We'll store the result in a variable. Remember the code is after the output. \"\"\" philip load philip filename md\" Hi there Philip \" md\"\"\" We see that the Pluto notebook has recognised that we created an object representing an image, and automatically displayed the resulting image of Philip, the cute Welsh Pembroke corgi and co professor of this course. Poor Philip will undergo quite a few transformations as we go along \"\"\" md\"\"\" 👉 Exercise change the url to use another image from the web. \"\"\" md\"\"\" Capturing an Image from your own camera \"\"\" md\"\"\" Even more fun is to use your own webcam. Try pressing the enable button below. Then press the camera to capture an image. Kind of fun to keep pressing the button as you move your hand etc. \"\"\" bind myface1 PlutoUI.WebcamInput help false, max size 150 myface1 myface1 , end 1 1 myface1 end 1 1, myface1 end 1 1, end 1 1 md\"\"\" Inspecting your data \"\"\" md\"\"\" Image size \"\"\" md\"\"\" The first thing we might want to know is the size of the image \"\"\" philip size size philip md\"\"\" Julia returns a pair of two numbers. Comparing these with the picture of the image, we see that the first number is the height, i.e. the vertical number of pixels, and the second is the width. \"\"\" philip height philip size 1 philip width philip size 2 md\"\"\" Locations in an image Indexing Now suppose that we want to examine a piece of the image in more detail. We need some way of specifying which piece of the image we want. Thinking of the image as a grid of pixels, we need a way to tell the computer which pixel or group of pixels we want to refer to. Since the image is a two dimensional grid, we can use two integers whole numbers to give the coordinates of a single pixel. Specifying coordinates like this is called indexing think of the index of a book, which tells you on which page an idea is discussed. In Julia we use square brackets, ` ` and ` ` for indexing \"\"\" a pixel philip 200, 100 md\"\"\" We see that Julia knows to draw our pixel object for us a block of the relevant color. When we index into an image like this, the first number indicates the row in the image, starting from the top, and the second the column , starting from the left. In Julia, the first row and column are numbered starting from 1, not from 0 as in some other programming languages. \"\"\" md\"\"\" We can also use variables as indices... \"\"\" md\"\"\" ...and these variables can be controlled by sliders \"\"\" bind row i Slider 1 size philip 1 , show value true bind col i Slider 1 size philip 2 , show value true row i,col i philip row i, col i md\"\"\" Locations in an image Range indexing We saw that we can use the row number and column number to index a single pixel of our image. Next, we will use a range of numbers to index multiple rows or columns at once, returning a subarray \"\"\" philip 550 650, 1 philip width md\"\"\" Here, we use `a b` to mean \" all numbers between `a` and `b` \". For example \"\"\" collect 1 10 md\"\"\" You can also use a ` ` without start and end to mean \" every index \" \"\"\" philip 550 650, md\"\"\" Let's get a single row of pixels \"\"\" philip 550, philip head philip 470 800, 140 410 md\"\"\" Scroll in on Philip's nose Use the widgets below slide left and right sides . \"\"\" bind range rows RangeSlider 1 size philip head 1 bind range cols RangeSlider 1 size philip head 2 nose philip head range rows, range cols md\"\"\" Process Modifying an image Now that we have access to image data, we can start to process that data to extract information and or modify it in some way. We might want to detect what type of objects are in the image, say to detect whether a patient has a certain disease. To achieve a high level goal like this, we will need to perform mid level operations, such as detecting edges that separate different objects based on their color. And, in turn, to carry that out we will need to do low level operations like comparing colors of neighboring pixels and somehow deciding if they are \"different\". \"\"\" md\"\"\" Representing colors We can use indexing to modify a pixel's color. To do so, we need a way to specify a new color. Color turns out to be a complicated concept, having to do with the interaction of the physical properties of light with the physiological mechanisms and mental processes by which we detect it We will ignore this complexity by using a standard method of representing colours in the computer as an RGB triple , i.e. a triple of three numbers r, g, b , giving the amount of red, of green and of blue in a colour, respectively. These are numbers between 0 none and 1 full . The final colour that we perceive is the result of \"adding\" the corresponding amount of light of each colour the details are fascinating, but beyond the scope of this course \"\"\" md\"\"\" We can create a new color in Julia as follows \"\"\" RGB 1.0, 0.0, 0.0 begin md\"\"\" A pixel with bind test r Scrubbable 0 0.1 1 default 0.1 red, bind test g Scrubbable 0 0.1 1 default 0.5 green and bind test b Scrubbable 0 0.1 1 default 1.0 blue looks like \"\"\" end RGB test r, test g, test b md\"\"\" Exercise 2.5 👉 Write a function `invert` that inverts a color, i.e. sends r, g, b to 1 r, 1 g, 1 b . \"\"\" function invert color AbstractRGB return missing end md\"Let's invert some colors \" color black RGB 0.0, 0.0, 0.0 invert color black color red RGB 0.8, 0.1, 0.1 invert color red md\"Can you invert the picture of Philip?\" philip inverted missing md\"\"\" Modifying a pixel Let's start by seeing how to modify an image, e.g. in order to hide sensitive information. We do this by assigning a new value to the color of a pixel \"\"\" let temp copy philip head temp 100, 200 RGB 1.0, 0.0, 0.0 temp end md\"\"\" Groups of pixels We probably want to examine and modify several pixels at once. For example, we can extract a horizontal strip 1 pixel tall \"\"\" philip head 50, 50 100 md\"\"\" Here, Julia is showing the strip as a collection of rectangles in a row. \"\"\" md\"\"\" And then modify it \"\"\" let temp copy philip head temp 50, 50 100 . RGB 1.0, 0.0, 0.0 temp end md\"\"\" Similarly we can modify a whole rectangular block of pixels \"\"\" let temp copy philip head temp 50 100, 50 100 . RGB 1.0, 0.0, 0.0 temp end md\"\"\" Exercise 1.2 👉 Generate a vector of 100 zeros. Change the center 20 elements to 1. \"\"\" function create bar return missing end if isdefined create bar not defined create bar else let result create bar if ismissing result still missing elseif isnothing result keep working md\"Did you forget to write `return`?\" elseif result isa Vector || length result 100 keep working md\"The result should be a `Vector` with 100 elements.\" elseif result 1,50,100 0,1,0 keep working else correct end end end md\"\"\" Reducing the size of an image \"\"\" md\"\"\" Maybe we would also like to reduce the size of this image, since it's rather large. For example, we could take every 10th row and every 10th column and make a new image from the result \"\"\" reduced image philip 1 10 end, 1 10 end md\"\"\" Note that the resulting image doesn't look very good, since we seem to have lost too much detail. Exercise Think about what we might do to reduce the size of an image without losing so much detail. \"\"\" md\"\"\" Model Creating synthetic images Think about your favorite Pixar movie e.g. Monsters Inc. Movie frames are images that are generated from complicated mathematical models. Ray tracing which may be covered in this class is a method for making images feel realistic. \"\"\" md\"\"\" Output Saving an image to a file Finally, we want to be able to save our new creation to a file. To do so, you can right click on a displayed image, or you can write it to a file. Fill in a path below \"\"\" save \"reduced phil.png\", reduced image md\"\"\" html\" br \" \"\"\" md\"\"\" Computer science Arrays An image is a concrete example of a fundamental concept in computer science, namely an array . Just as an image is a rectangular grid, where each grid cell contains a single color, an array is a rectangular grid for storing data. Data is stored and retrieved using indexing, just as in the image examples each cell in the grid can store a single \"piece of data\" of a given type. Dimension of an array An array can be one dimensional, like the strip of pixels above, two dimensional, three dimensional, and so on. The dimension tells us the number of indices that we need to specify a unique location in the grid. The array object also needs to know the length of the data in each dimension. Names for different types of array One dimensional arrays are often called vectors or, in some other languages, \"lists\" and two dimensional arrays are matrices . Higher dimensional arrays are tensors . Arrays as data structures An array is an example of a data structure , i.e. a way of arranging data such that we can access it. A key theme in computer science is that of designing different data structures that represent data in different ways. Conceptually, we can think of an array as a block of data that has a position or location in space. This can be a useful way to arrange data if, for example, we want to represent the fact that values in nearby locations in array are somehow near to one another. Images are a good example of this neighbouring pixels often represent different pieces of the same object, for example the rug or floor, or Philip himself, in the photo. We thus expect neighbouring pixels to be of a similar color. On the other hand, if they are not, this is also useful information, since that may correspond to the edge of an object. \"\"\" md\"\"\" Julia constructing arrays Creating vectors and matrices Julia has strong support for arrays of any dimension. Vectors, or one dimensional arrays, are written using square brackets and commas \"\"\" 1, 20, \"hello\" RGB 1, 0, 0 , RGB 0, 1, 0 , RGB 0, 0, 1 md\"\"\" Matrices, or two dimensional arrays, also use square brackets, but with spaces and new lines instead of commas \"\"\" RGB 1, 0, 0 RGB 0, 1, 0 RGB 0, 0, 1 RGB 0.5, 0.5, 0.5 md\"\"\" Array comprehensions It's clear that if we want to create an array with more than a few elements, it will be very tedious to do so by hand like this. Rather, we want to automate the process of creating an array by following some pattern, for example to create a whole palette of colors Let's start with all the possible colors interpolating between black, `RGB 0, 0, 0 `, and red, `RGB 1, 0, 0 `. Since only one of the values is changing, we can represent this as a vector, i.e. a one dimensional array. A neat method to do this is an array comprehension . Again we use square brackets to create an array, but now we use a variable that varies over a given range values \"\"\" RGB x, 0, 0 for x in 0 0.1 1 md\"\"\" Here, `0 0.1 1` is a range the first and last numbers are the start and end values, and the middle number is the size of the step. \"\"\" md\"\"\" In a similar way we can create two dimensional matrices, by separating the two variables for each dimension with a comma `,` \"\"\" RGB i, j, 0 for i in 0 0.1 1, j in 0 0.1 1 md\"\"\" Joining matrices We often want to join vectors and matrices together. We can do so using an extension of the array creation syntax \"\"\" philip head philip head philip head reverse philip head, dims 2 reverse philip head, dims 1 rot180 philip head md\"\"\" Pluto Interactivity using sliders \"\"\" md\"\"\" Suppose we want to see the effect of changing the number of colors in our vector or matrix. We could, of course, do so by manually fiddling with the range. It would be nice if we could do so using a user interface , for example with a slider . Fortunately, the Pluto notebook allows us to do so \"\"\" md\"\"\" We can define a slider using \"\"\" bind number reds Slider 1 100, show value true md\"\"\" The `Slider` type is defined in the `PlutoUI.jl` package. \"\"\" md\"\"\" This creates a new variable called `number reds`, whose value is the value shown by the slider. When we move the slider, the value of the variable gets updated. Since Pluto is a reactive notebook, other cells which use the value of this variable will automatically be updated too \"\"\" md\"\"\" Let's use this to make a slider for our one dimensional collection of reds \"\"\" RGB red value number reds, 0, 0 for red value in 0 number reds md\"\"\" When you move the slider, you should see the number of red color patches change \"\"\" md\"\"\" What is going on here is that we are creating a vector in which `red value` takes each value in turn from the range from `0` up to the current value of `number reds`. If we change `number reds`, then we create a new vector with that new number of red patches. \"\"\" md\"\"\" Exercise Make three sliders with variables `r`, `g` and `b`. Then make a single color patch with the RGB color given by those values. \"\"\" md\"\"\" We can do the same to create different size matrices, by creating two sliders, one for reds and one for greens. Try it out \"\"\" md\"\"\" Summary \"\"\" md\"\"\" Let's summarize the main ideas from this notebook Images are arrays of colors We can inspect and modify arrays using indexing We can create arrays directly or using array comprehensions \"\"\" begin colored line x Vector Real Gray. Float64. hcat x ' colored line x Any nothing end colored line create bar bigbreak html\" br br br br br \" bigbreak "},{"url":"images_abstractions/linear_transformation/","title":"linear_transformation","tags":[],"text":" A Pluto.jl notebook v0.19.25 using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end begin using Colors, ColorVectorSpace, ImageShow, FileIO, ImageIO using PlutoUI using HypertextLiteral using LinearAlgebra end md\"Show grid lines bind show grid CheckBox default true \" let range 2 .1 2 md\"\"\" a bind a Slider range default 1.0, show value true b bind b Slider range default 0.0, show value true c bind c Slider range default 0.0, show value true d bind d Slider range default 1.0, show value true Re run this cell to reset to identity transformation \"\"\" end A a b c d md\" Det A a d c b det A \" md\"\"\" Appendix \"\"\" det A det A if det A 0 invA inv A end img sources \"https user images.githubusercontent.com 6933510 108605549 fb28e180 73b4 11eb 8520 7e29db0cc965.png\" \"Corgis\", \"https user images.githubusercontent.com 6933510 108883855 39690f80 7606 11eb 8eb1 e595c6c8d829.png\" \"Arrows\", \"https images.squarespace cdn.com content v1 5cb62a904d546e33119fa495 1589302981165 HHQ2A4JI07C43294HVPD ke17ZwdGBToddI8pDm48kA7bHnZXCqgRu4g0 U7hbNpZw zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZamWLI2zvYWH8K3 s 4yszcp2ryTI0HqTOaaUohrI8PISCdr 3EAHMyS8K84wLA7X0UZoBreocI4zSJRMe1GOxcKMshLAGzx4R3EDFOm1kBS fluffy corgi?format 2500w\" \"Alan\" md\"\"\" Choose an image bind img source Select img sources \"\"\" img original load download img source typeof img original function trygetpixel img AbstractMatrix, x Float64, y Float64 rows, cols size img \"The linear map 1,1 ↦ 0,1 \" f t t 1.0 1.0 1.0 i floor Int, rows f y j floor Int, cols f x rows cols if 1 i ≤ rows && 1 j ≤ cols img i,j else zero eltype img end end function with gridlines img Array Any,2 n 8 sep i size img, 1 ÷ n sep j size img, 2 ÷ n result copy img stroke zero eltype img RGBA RGB 1,1,1 , 0.75 stroke RGBA 1, 1, 1, 0.75 result 1 sep i end, . stroke result , 1 sep j end . stroke a second time, to create a line 2 pixels wide result 2 sep i end, . stroke result , 2 sep j end . stroke return result end img if show grid with gridlines img original else img original end if det A 0 RGB 1.0, 1.0, 1.0 else in x, in y invA out x, out y trygetpixel img, in x, in y end for out y in LinRange 2, 2, 300 , out x in LinRange 2, 2, 300 "},{"url":"images_abstractions/newton_method/","title":"The Newton Method","tags":["lecture","module1","track_math","continuous","differentiation","automatic differentiation","ForwardDiff","interactive","Symbolics","transformation"],"text":" A Pluto.jl notebook v0.19.25 frontmatter chapter 1 video \"https www.youtube.com watch?v Wjcx9sNSLP8\" image \"https user images.githubusercontent.com 6933510 136196605 b6119b9d 223c 44bc 97d5 ef7cfce66483.gif\" section 6 order 6 title \"The Newton Method\" layout \"layout.jlhtml\" youtube id \"Wjcx9sNSLP8\" description \"This lecture explains a method for finding the root of a function, but using code an illustrations instead of a chalkboard We will illustrate the Newton method using the ForwardDiff.jl package to carry out automatic differentiation, but we will also try to understand what's going on \\\"under the hood\\\".\" tags \"lecture\", \"module1\", \"track math\", \"continuous\", \"differentiation\", \"automatic differentiation\", \"ForwardDiff\", \"interactive\", \"Symbolics\", \"transformation\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end begin using Symbolics, ForwardDiff, Plots, PlutoUI, LaTeXStrings using ForwardDiff jacobian end md\"\"\" Solving equations and finding inverse transformations using the Newton method \"\"\" md\"\"\" In science and engineering we often need to solve systems of equations . If the equations are linear then linear algebra tells us a general method to solve them these are now routinely applied to solve systems of millions of linear equations. If the equations are non linear then things are less obvious. The main solution methods we know work by... reducing the nonlinear equations to a sequence of linear equations They do this by approximating the function by a linear function and solving that to get a better solution, then repeating this operation as many times as necessary to get a sequence of increasingly better solutions. This is an example of an iterative algorithm . A well known and elegant method, which can be used in many different contexts, is the Newton method . It does, however, have the disadvantage that it requires derivatives of the function. This can be overcome using automatic differentiation techniques. We will illustrate the Newton method using the `ForwardDiff.jl` package to carry out automatic differentiation, but we will also try to understand what's going on \"under the hood\". \"\"\" md\"\"\" The Newton method in 1D We would like to solve equations like f x g x . We rewrite that by moving all the terms to one side of the equation so that we can write h x 0 , with h x f x g x . A point x^ such that h x^ 0 is called a root or zero of h . The Newton method finds zeros, and hence solves the original equation. \"\"\" md\"\"\" The idea of the Newton method is to follow the direction in which the function is pointing We do this by building a tangent line at the current position and following that instead, until it hits the x axis. Let's look at that visually first \"\"\" md\"\"\" n bind n2 Slider 0 10, show value true, default 0 \"\"\" md\"\"\" x₀ bind x02 Slider 10 10, show value true, default 6 \"\"\" md\"\"\" n bind n Slider 0 10, show value true, default 0 \"\"\" md\"\"\" x₀ bind x0 Slider 10 10, show value true, default 6 \"\"\" md\"\"\" Using symbolic calculations to understand derivatives and nonlinear maps \"\"\" md\"\"\" We can use Julia's new symbolic capabilities to understand what's going on with a nonlinear polynomial function. Let's see what happens if we perturb a function f around a point z by a small amount \\eta . \"\"\" variables z, η md\"\"\" m bind m Slider 1 6, show value true \"\"\" f x x^m 2 f′ x ForwardDiff.derivative f, x f z f z η md\"\"\" When \\eta is small, \\eta^2 is very small, so we can ignore it. We are left with terms that either don't contain \\eta constants , or multiply \\eta linear . The part that multiplies \\eta is the derivative \"\"\" f′ z f z η f′ z md\"\"\" The derivative gives the \" linear part\" of the function. `ForwardDiff.jl`, and forward mode automatic differentiation in general, effectively uses this although not symbolically in this sense to just propagate the linear part of each function through a calculation. \"\"\" md\"\"\" Mathematics of the Newton method \"\"\" md\"\"\" We can convert the idea of \"following the tangent line\" into equations as follows. You can also do so by just looking at the geometry in 1D, but that does not help in 2D. \"\"\" md\"\"\" Suppose we have a guess x 0 for the root and we want to find a hopefully better guess x 1 . Let's set x 1 x 0 \\delta , where x 1 and \\delta are still unknown. We want x 1 to be a root, so \"\"\" md\"\"\" f x 1 f x 0 \\delta \\simeq 0 \"\"\" md\"\"\" If we are already \"quite close\" to the root then \\delta should be small, so we can approximate f using the tangent line f x 0 \\delta \\, f' x 0 \\simeq 0 and hence \\delta \\simeq \\frac f x 0 f' x 0 so that x 1 x 0 \\frac f x 0 f' x 0 Now we can repeat so that x 2 x 1 \\frac f x 1 f' x 1 and in general x n 1 x n \\frac f x n f' x n . This is the Newton method in 1D. \"\"\" md\"\"\" Implementation in 1D \"\"\" function newton1D f, x0 f′ x ForwardDiff.derivative f, x \\prime TAB x0 37.0 starting point sequence x0 x x0 for i in 1 10 x f x f′ x end return x end newton1D x x^2 2, 37.0 sqrt 2 md\"\"\" Symbolic derivative in 2D \"\"\" md\"\"\" Let's see what happens when we perturb by small amounts \\delta in the x direction and \\epsilon in the y direction around the point a, b \"\"\" md\"\"\" p bind p Slider 0 0.01 1, show value true \"\"\" variables a, b, δ, ϵ md\"\"\" Newton for transformations in 2 dimensions T \\mathbb R ^2 \\to \\mathbb R ^2 \"\"\" md\"\"\" We want to find the inverse T^ 1 y , i.e. to solve the equation T x y for x . We use the same idea as in 1D, but now in 2D \"\"\" md\"\"\" T x 0 \\delta \\simeq 0 T x 0 J \\cdot \\delta \\simeq 0, where J DT x 0 is the Jacobian matrix of T at x 0 , i.e. the best linear approximation of T near to x 0 . \"\"\" md\"\"\" Hence \\delta is the solution of the system of linear equations \"\"\" md\"\"\" J \\cdot \\delta T x 0 Then we again construct the new approximation x 1 as x 1 x 0 \\delta . \"\"\" md\"\"\" In 2D we have an explicit formula for the inverse of the matrix. \"\"\" md\"\"\" Implementation in 2D \"\"\" function newton2D step T, x J ForwardDiff.jacobian T, x should use StaticVectors δ J \\ T x J^ 1 T x return x δ end \"Looks for x such that T x 0\" function newton2D T, x0, n 10 x x0 for i in 1 n x newton2D step T, x end return x end md\"\"\" Remember that Newton is designed to look for roots , i.e. places where T x 0 . We want T x y , so we need another layer \"\"\" \"Looks for x such that f x y, i.e. f x y 0\" function inverse f, y, x0 0, 0 return newton2D x f x y, x0 end inverse f y inverse f, y straight x0, y0, x, m y0 m x x0 function standard Newton f, n, x range, x0, ymin 10, ymax 10 f′ x ForwardDiff.derivative f, x p plot f, x range, lw 3, ylim ymin, ymax , legend false, size 400, 300 hline 0.0 , c \"magenta\", lw 3, ls dash scatter x0 , 0 , c \"green\", ann x0, 5, L\"x 0\", 10 for i in 1 n plot x0, x0 , 0, f x0 , c gray, alpha 0.5 scatter x0 , f x0 , c red m f′ x0 plot x range, straight x0, f x0 , x, m for x in x range , c blue, alpha 0.5, ls dash, lw 2 x1 x0 f x0 m scatter x1 , 0 , c \"green\", ann x1, 5, L\"x % i\", 10 x0 x1 end p | as svg end let f x x^2 2 standard Newton f, n2, 1 0.01 10, x02, 10, 70 end let f x 0.2x^3 4x 1 standard Newton f, n, 10 0.01 10, x0, 10, 70 end T α x, y , x α y^2, y α x^2 jacobian T p , a, b .| Text jacobian T p , a, b δ, ϵ md\"\"\" α bind α Slider 0.0 0.01 1.0, show value true \"\"\" T α 0.3, 0.4 inverse T α 0.3, 0.4 T α ∘ inverse T α 0.3, 0.4 md\"\"\" Appendix \"\"\" expand ex simplify ex, polynorm true expand f z η expand f z η f z η f′ z image expand. T p a δ , b ϵ image T p a, b simplify. expand. image T p a, b jacobian T p , a, b δ, ϵ "},{"url":"images_abstractions/seamcarving/","title":"Seam Carving","tags":["lecture","module1","image","matrix","track_julia","track_climate","track_data","optimization","interactive"],"text":" A Pluto.jl notebook v0.19.25 frontmatter chapter 1 video \"https www.youtube.com watch?v KyBXJV1zFlo\" image \"https user images.githubusercontent.com 6933510 136196584 b3c806a8 aa61 48d9 9e73 30583fcc38bf.gif\" section 8 order 8 title \"Seam Carving\" layout \"layout.jlhtml\" youtube id \"KyBXJV1zFlo\" description \"\" tags \"lecture\", \"module1\", \"image\", \"matrix\", \"track julia\", \"track climate\", \"track data\", \"optimization\", \"interactive\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end begin using ImageMagick using Colors, ColorVectorSpace, ImageShow, FileIO, ImageIO using ImageFiltering using Plots, PlutoUI Standard libraries using Statistics, LinearAlgebra end md\"\"\" Scroll through the images in this notebook. The idea of seam carving is to shrink an image by removing the \"least interesting\" parts of the image, but without resizing the objects within the image. We want to remove the \"dead space\" within the image. We try to find a \"seam\", i.e. a connected path of pixels from top to bottom of the image, which consists of the \"least important\" pixels, by some measure. We then remove the pixels in that seam to give an image that is one pixel narrower. In order to do this, we need to decide how to measure which pixels are \"important\". \"\"\" md\"\"\" Fall 2020 MIT Class Video from Grant Sanderson Here is Grant Sanderson 3Blue1Brown explaining seam carving using this notebook from the Fall 2020 edition of this class. \"\"\" html\"\"\" script src \"https cdn.jsdelivr.net npm lite youtube embed 0.2.0 src lite yt embed.js\" integrity \"sha256 wwYlfEzWnCf2nFlIQptfFKdUmBeH5d3G7C2352FdpWE \" crossorigin \"anonymous\" defer script link rel \"stylesheet\" href \"https cdn.jsdelivr.net npm lite youtube embed 0.2.0 src lite yt embed.css\" integrity \"sha256 99PgDZnzzjO63EyMRZfwIIA i OS2wDx6k 9Eo7JDKo \" crossorigin \"anonymous\" lite youtube videoid rpB6zQNsbQU params \"modestbranding 1&rel 0\" lite youtube \"\"\" md\"\"\" The seam carving algorithm We need to specify a notion of importance of pixels. The seam will then sum up the importance of pixels over the seam and pick the seam which minimizes this total importance. We will assign importance as \"the extent to which a pixel sits inside an edge\". So we need to calculate the \"edgeness\" of each pixel. \"\"\" md\"\"\" 1. We will use convolution with Sobel filters for edge detection. 2. Then we will use that to write an algorithm that removes \"uninteresting\" bits of an image in order to shrink it. \"\"\" image urls \"https wisetoast.com wp content uploads 2015 10 The Persistence of Memory salvador deli painting.jpg\", \"https upload.wikimedia.org wikipedia commons thumb 1 17 Gustave Caillebotte Paris Street%3B Rainy Day Google Art Project.jpg 1014px Gustave Caillebotte Paris Street%3B Rainy Day Google Art Project.jpg\", \"https upload.wikimedia.org wikipedia commons thumb 1 17 Gustave Caillebotte Paris Street%3B Rainy Day Google Art Project.jpg 1014px Gustave Caillebotte Paris Street%3B Rainy Day Google Art Project.jpg\", \"https upload.wikimedia.org wikipedia commons thumb c cc Grant Wood American Gothic Google Art Project.jpg 480px Grant Wood American Gothic Google Art Project.jpg\", \"https wisetoast.com wp content uploads 2015 10 The Persistence of Memory salvador deli painting.jpg\", \"https upload.wikimedia.org wikipedia commons thumb 7 7d A Sunday on La Grande Jatte%2C Georges Seurat%2C 1884.jpg 640px A Sunday on La Grande Jatte%2C Georges Seurat%2C 1884.jpg\", \"https upload.wikimedia.org wikipedia commons thumb e ea Van Gogh Starry Night Google Art Project.jpg 758px Van Gogh Starry Night Google Art Project.jpg\", \"https web.mit.edu facilities photos construction Projects stata 1 large.jpg\", image url image urls 1 img load download image url arbitrarily choose the brightness of a pixel as mean of rgb brightness c AbstractRGB mean c.r, c.g, c.b Use a weighted sum of rgb giving more weight to colors we perceive as 'brighter' Based on https www.tutorialspoint.com dip grayscale to rgb conversion.htm brightness c AbstractRGB 0.3 c.r 0.59 c.g 0.11 c.b Gray. brightness. img md\"\"\" Edge detection filter Spoiler alert We use the Sobel edge detection filter we created in our Homework. ```math \\begin align G x & \\begin bmatrix 1 & 0 & 1 \\\\ 2 & 0 & 2 \\\\ 1 & 0 & 1 \\\\ \\end bmatrix \\star A\\\\ 10pt G y & \\begin bmatrix 1 & 2 & 1 \\\\ 0 & 0 & 0 \\\\ 1 & 2 & 1 \\\\ \\end bmatrix \\star A \\end align ``` Here, \\star denotes convolution. Here A is the array corresponding to your image. We can think of G x and G y as calculating discretized derivatives in the x and y directions. Then we combine them by finding the magnitude of the discretized gradient , in the sense of multivariate calculus, by defining G \\text total \\sqrt G x^2 G y^2 . \"\"\" md\"\"\" Here are the Sobel kernels for the derivatives in each direction \"\"\" Sy, Sx Kernel.sobel collect Int. 8 . Sx , collect Int. 8 . Sy plotly surface brightness. img md\"\"\" blue shows positive values red shows negative values \"\"\" function shrink image image, ratio 5 height, width size image new height height ÷ ratio 1 new width width ÷ ratio 1 list mean image ratio i ratio i 1 , ratio j ratio j 1 , for j in 1 new width for i in 1 new height reshape list, new height, new width end function convolve M, kernel height, width size kernel half height height ÷ 2 half width width ÷ 2 new image similar M i, j loop over the original image m, n size M inbounds for i in 1 m for j in 1 n k, l loop over the neighbouring pixels accumulator 0 M 1, 1 for k in half height half height height 1 for l in half width half width width 1 Mi i k Mj j l First index into M if Mi 1 Mi 1 elseif Mi m Mi m end Second index into M if Mj 1 Mj 1 elseif Mj n Mj n end accumulator kernel k, l M Mi, Mj end end new image i, j accumulator end end return new image end function edgeness img Sy, Sx Kernel.sobel b brightness. img ∇y convolve b, Sy ∇x convolve b, Sx sqrt. ∇x.^2 ∇y.^2 end function show colored array array pos color RGB 0.36, 0.82, 0.8 neg color RGB 0.99, 0.18, 0.13 to rgb x max x, 0 pos color max x, 0 neg color to rgb. array maximum abs. array end show colored array Sx , show colored array Sy let ∇y convolve brightness. img , Sy ∇x convolve brightness. img , Sx data md\"``G x``\", md\"``G y``\", zoom in on the clock img 300 end, 1 300 , img 300 end, 1 300 , show colored array. ∇x 300 end, 1 300 , ∇y 300 end, 1 300 ... avoid collating the images into one big matrix todisplay permutedims reshape data, 2,3 , 2,1 assert length todisplay 10 PlutoUI.ExperimentalLayout.grid todisplay end md\"\"\" Seam carving idea The idea of seam carving is to find a path from the top of the image to the bottom of the image where the path minimizes the edgness. In other words, this path minimizes the number of edges in the image that it crosses . We will call the edgeness the energy . \"\"\" md\"\"\" At every step in going down, the path is allowed to go south west, south or south east. We want to find a connected path, or seam , with the minimum possible sum of \"energies\" along the path. We start by writing a `least edgy` function which takes a matrix of energies and returns a new matrix. The new matrix has entries M i, j which gives the minimum possible energy when starting from the pixel i, j and going from there down to a pixel in the bottom row. \"\"\" e x,y ↙ ↓ ↘ pick the next path which gives the least overall energy e x 1,y 1 e x,y 1 e x 1,y 1 Basic calculation e x,y min e x 1,y 1 , e x,y , e x 1,y `dirs` records which direction we take from 1 SW, 0 S, 1 SE function least edgy E least E zeros size E dirs zeros Int, size E least E end, . E end, the minimum energy on the last row is the energy itself m, n size E Go from the last row up, finding the minimum energy for i in m 1 1 1 for j in 1 n j1, j2 max 1, j 1 , min j 1, n e, dir findmin least E i 1, j1 j2 least E i,j e least E i,j E i,j dirs i, j 1, 0, 1 dir j 1 end end return least E, dirs end The bright areas are screaming \"AVOID ME \" least e, dirs least edgy edgeness img show colored array least e md\"\"\" Here are the directions that we should take at each step \"\"\" direction the path should take at every pixel. reduce x, y x y \"\\n\", reduce , getindex. \" \", \"↙\", \"↓\", \"↘\" , , dirs 1 25, 1 60 . 3 , dims 2, init \"\" , init \"\" | Text md\" Remove seams\" md\"\"\" We now compress an image horizontally by successively removing a number of seams of lowest energy. \"\"\" function get seam at dirs, j m size dirs, 1 js fill 0, m js 1 j for i 2 m js i js i 1 dirs i 1, js i 1 end return tuple. 1 m, js end get seam at dirs, 2 function mark path img, path img′ copy img m size img, 2 for i, j in path To make it easier to see, we'll color not just the pixels of the seam, but also those adjacent to it for j′ in j 1 j 1 img′ i, clamp j′, 1, m RGB 1,0,1 end end return img′ end md\"\"\" In the visualization below, the slider specifies which column we start with at the top. The pink seam is the best least total energy that will be snipped out. \"\"\" bind start column Slider 1 size img, 2 , show value true path get seam at dirs, start column function pencil X f x RGB 1 x,1 x,1 x map f, X . maximum X end e edgeness img md\"\"\" Lowest energy path We can use `findmin` to find the path with the least energy \"\"\" function rm path img, path img′ img , 1 end 1 one less column for i, j in path img′ i, 1 j 1 . img i, 1 j 1 img′ i, j end . img i, j 1 end end img′ end function shrink n img, n imgs marked imgs e edgeness img for i 1 n least E, dirs least edgy e , min j findmin view least E 1, seam get seam at dirs, min j img rm path img, seam Recompute the energy for the new image Note, this currently involves rerunning the convolution on the whole image, but in principle the only values that need recomputation are those adjacent to the seam, so there is room for a meanintful speedup here. e edgeness img e rm path e, seam push imgs, img push marked imgs, mark path img, seam end imgs, marked imgs end n examples min 200, size img, 2 returns two vectors of n successively smaller images The second images have markings where the seam is cut out carved, marked carved shrink n img, n examples md\"\"\" Seam carving in action \"\"\" md\"\"\" Here is the algorithm in action. Now the slider tells us on which step of the algorithm we are, having removed each least energy seam at each step \"\"\" md\"\"\" Shrink by bind n Slider 1 length carved show value true \"\"\" md\"\"\" Appendix \"\"\" function downsample img maxheight 100 h,w size img if h maxheight img else img floor. Int,LinRange 1,h,maxheight , floor. Int,LinRange 1,w,floor Int, maxheight w h end end downsample img maxheight 40 function hbox x, y, gap 16 sy size y , sx size x w, h max sx 1 , sy 1 , gap sx 2 sy 2 slate fill RGB 1,1,1 , w,h slate 1 size x,1 , 1 size x,2 . RGB. x slate 1 size y,1 , size x,2 gap . 1 size y,2 . RGB. y slate end function hbox imgs... maxheight 200 g x PlutoUI.ExperimentalLayout.Div downsample x maxheight style Dict \"display\" \"flex\", \"flex\" \"1 0 auto\" PlutoUI.ExperimentalLayout.Div collect map g, imgs style Dict \"display\" \"flex\", \"flex direction\" \"row\", \"aspect ratio\" length imgs size imgs 1 ,2 size imgs 2 ,1 end begin img brightness brightness. img ∇x convolve img brightness, Sx ∇y convolve img brightness, Sy hbox show colored array ∇x , show colored array ∇y end begin edged edgeness img hbox img, pencil edged hbox img, Gray. edgeness img maximum abs. edged end hbox mark path img, path , mark path show colored array least e , path hbox mark path img, path , mark path pencil e , path let least energy path of them all , k findmin least e 1, path get seam at dirs, k hbox mark path img, path , mark path show colored array least e , path end hbox img, marked carved n vbox x... PlutoUI.ExperimentalLayout.vbox collect x size img size carved n "},{"url":"images_abstractions/structure/","title":"Taking Advantage of Structure","tags":["lecture","module1","track_julia","type","programming","matrix","track_data","structure"],"text":" A Pluto.jl notebook v0.19.25 frontmatter chapter 1 video \"https www.youtube.com watch?v wZrVxbmX218\" image \"https user images.githubusercontent.com 6933510 136196581 ffdf4a3b f35c 4eb8 85a7 f07560bd421b.png\" section 9 order 9 title \"Taking Advantage of Structure\" layout \"layout.jlhtml\" youtube id \"wZrVxbmX218\" description \"\" tags \"lecture\", \"module1\", \"track julia\", \"type\", \"programming\", \"matrix\", \"track data\", \"structure\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end begin using Colors, ColorVectorSpace, ImageShow, FileIO, ImageIO using ImageShow.ImageCore using ColorSchemes using InteractiveUtils, PlutoUI using LinearAlgebra, SparseArrays, Statistics end PlutoUI.TableOfContents aside true myonehatvector 0, 1, 0, 0, 0, 0 also one \"cold\" 1 . myonehatvector struct OneHot AbstractVector Int n Int k Int end Base.size x OneHot x.n, Base.getindex x OneHot, i Int Int x.k i md\"\"\" One hot vectors This example comes from machine learning. \"\"\" md\"\"\" A one hot vector has a single \"hot\" element, i.e. a single 1 in a sea of zeros. For example \"\"\" md\"\"\"How much \"information\" numbers do you need to represent a one hot vector? Is it n or is it two? \"\"\" md\"\"\" There are also \"1 cold\" vectors \"\"\" md\"\"\" Julia `structs` creating a new type in Julia \"\"\" md\"\"\" We can create our own new types in Julia. Let's create a new type to represent one hot vectors. It will be a subtype of `AbstractVector`, meaning that it behaves like a vector. \"\"\" md\"\"\" We need to specify how long the vector is \"\"\" md\"\"\" and how to extract the i th component \"\"\" md\"\"\" Note that `x.k i` returns a Boolean value, `true` or `false`, which we are then converting to an `Int`. \"\"\" myonehotvector OneHot 6,2 myonehotvector 3 myonehotvector 2 md\"\"\" This behaves as if it were the original vector, but we are storing only 2 integers. This is an example of taking advantage of structure. \"\"\" md\"\"\" Julia `dump` \"\"\" md\"\"\" `dump` shows the internal data stored inside a given object \"\"\" dump myonehotvector md\"\"\" When used inside our code, however, it behaves and looks exactly like a vector. Pluto also displays it as a vector, with its individual elements. \"\"\" myonehotvector md\"\"\" Visualizing a one hot vector \"\"\" md\"\"\" n bind nn Slider 1 20, show value true \"\"\" md\"\"\" k bind kk Slider 1 nn, default 1, show value true \"\"\" x OneHot nn, kk md\" Diagonal matrices\" md\"Another example is diagonal matrices. Here's how you might see them in high school \" denseD 5 0 0 0 6 0 0 0 10 md\"Julia has a better way of representing them \" D Diagonal denseD md\"\"\" It even displays nicely, with dots instead of zeros. We can also create a diagonal matrix from the values on the diagonal \"\"\" Diagonal 5, 6, 10 md\"How much information is stored for each representation? We can use Julia's `dump` function to find out \" dump denseD dump D md\"\"\" We see that `Diagonal` stores only the diagonal entries, not the zeros \"\"\" md\"\"\"We should always look for structure where it exists \"\"\" md\" Sparse matrices\" md\"A sparse matrix is a matrix that has many zeros, and is hence worth storing in a sparse representation \" denseM 0 0 9 0 0 0 12 0 4 md\"\"\" The above displays a sparse matrix in so called ` i, j, value ` form. We could store sparse matrices in this way \"\"\" M sparse denseM md\"\"\" Although it looks like it's stored like this, in fact the actual storage format is different. In the Julia `SparseArrays.jl` package, the storage format is compressed sparse column CSC format, which is generally considered favorable for arithmetic, matrix vector products and column slicing. Of course, for specific matrices, other formats might be better. `nzval` contains the nonzero matrix entries `rowval` is the \"i\" or row entry for the corresponding value in nzval length rowval length nzval `colptr j ` points into nzval and tells you the first nonzero in or after column j The last entry of colptr points beyond the end of nzval to indicate no more columns. length colptr number of columns 1 \"\"\" dump sparse M md\"\"\" An example where CSC may not be a great choice is the following. The reason is that `colptr` must have an entry in each column \"\"\" M2 sparse 1, 2, 10^6 , 4, 9, 10^6 , 7, 8, 9 dump M2 M3 1 0 2 0 10 0 3 4 0 9 0 0 0 5 8 0 0 0 0 7 M4 M3 . 0 dump sparse M4 sparse M4 md\"\"\" Random vectors \"\"\" md\"How much structure is there in a random vector?\" v rand 1 9, 1 000 000 md\"\"\"You might guess that there is \"no structure\". But you can actually think of randomness itself as a structure. For example, take the mean and standard deviation some would say that's the structure. \"\"\" mean v , std v , 5, sqrt 10 2 3 md\"\"\" If you repeat the calculation, to 3 or 4 digits the mean and standard deviation don't change, and are approximately equal to the theoretical values on the right. \"\"\" md\"\"\" We can also count how many times each digit occurs in the data set \"\"\" sum v . i for i in 1 9 md\"\"\" We see that each number occurs roughly the same number of times. \"\"\" md\"Statisticians and professors who've just graded exams might say that under certain circumstances the mean and the variance give you the necessary structure, and the rest can be thrown away.\" m sum v length v mean σ² sum v . m .^ 2 length v 1 σ sqrt σ² std v md\"Sometimes the summary statistics are all you want. But sometimes not. \" md\" Multiplication tables\" outer v, w x y for x ∈ v, y ∈ w just a multiplication table outer 1 10, 1 10 md\"Did you memorize this in third grade?\" bind k Slider 1 14, show value true outer 1 k, 1 k outer 2,4,6 , 10,100,1000 md\"\"\" A multiplication table is clearly a structure, but it's not sparse there are no zeros. Nonetheless you need much less information to reconstruct the matrix. \"\"\" md\"In the context of 1 k times 1 k, just one number k is needed.\" md\"If you look at the following matrix? Does it have any structure? It's certainly more hidden.\" outer rand 3 , rand 4 but it's just a multiplication table md\"\"\" You might guess by visualizing the matrix that it is a multiplication table \"\"\" md\"We can factor out a multiplication table, if it's there \" md\"\"\" Julia Exceptions are thrown generated using `error` An exception is anything that can interrupt a program, e.g. invalid input data. \"\"\" function factor mult table v mult table , 1 w mult table 1, if v 1 ≠ 0 w v 1 end Good code has a check if outer v, w ≈ mult table return v, w else error \"Input is not a multiplication table\" end end factor outer 1, 2, 3 , 2, 2, 2 md\"\"\" A random 2x2 matrix is not a multiplication table. Most matrices are not given by multiplication tables. \"\"\" factor rand 2,2 md\" Let's add two or more multiplication tables \" A sum outer rand 3 ,rand 3 for i 1 2 md\"Is it possible, given the matrix, to find the structure? E.g. to show that a matrix is a sum of outer products multiplication table .\" md\"The answer is yes The Singular Value Decomposition SVD from algebra can find the structure \" md\"\"\" Let's take the SVD and calculate the sum of two outer products \"\"\" begin U, Σ, V svd A outer U , 1 , V , 1 Σ 1 outer U , 2 , V , 2 Σ 2 end md\"\"\" We see that we reconstruct the original matrix \" \"\"\" B rand 3,3 begin UU, ΣΣ, VV svd B outer UU ,1 , VV ,1 ΣΣ 1 outer UU ,2 , VV ,2 ΣΣ 2 end md\"and it can approximate too \" flag outer 1,1,1,2,2,2,1,1,1 , 1,1,1,1,1,1,1,1,1 cs distinguishable colors 100 cs flag cs flag flag' outer 1,1,1,2,2,2,1,1,1 , 1,1,1,1,1,1,1,1,1 outer 1,1,1,1,1,1,1,1,1 , 1,1,1,2,2,2,1,1,1 cs outer 1,1,1,2,2,2,1,1,1 , 1,1,1,1,1,1,1,1,1 outer 1,1,1,1,1,1,1,1,1 , 1,1,1,2,2,2,1,1,1 md\"\"\" Singular Value Decomposition SVD A tool to find structure \"\"\" tree url \"https user images.githubusercontent.com 6933510 110924885 d7f1b200 8322 11eb 9df7 7abf29c8db7d.png\" image load download tree url picture Float64. channelview image size picture pr, pg, pb eachslice picture, dims 1 RGB. pr, 0, 0 RGB. 0, pg, 0 RGB. 0, 0, pb begin Ur, Σr, Vr svd pr Ug, Σg, Vg svd pg Ub, Σb, Vb svd pb end bind n Slider 1 200, show value true RGB. sum outer Ur ,i , Vr ,i . Σr i for i in 1 n , sum outer Ug ,i , Vg ,i . Σg i for i in 1 n , sum outer Ub ,i , Vb ,i . Σb i for i in 1 n md\" Appendix\" md\" Syntax Learned\" md\"\"\" Syntax to be learned A `struct` is a great way to embody structure. `dump` to see what's inside a data structure. `Diagonal`, `sparse` `error` throws an exception `svd` Singular Value Decomposition \"\"\" dump, Diagonal, error, svd begin show image M get. ColorSchemes.rainbow , M . maximum M show image x AbstractVector show image x' end show image x show image outer rand 10 , rand 10 "},{"url":"images_abstractions/transformations2/","title":"Transformations II: Composability, Linearity and Nonlinearity","tags":["lecture","module1","transformation","track_math","track_julia","inverse","composition","matrix","linear algebra","nonlinear","linear"],"text":" A Pluto.jl notebook v0.19.25 frontmatter chapter 1 video \"https www.youtube.com watch?v VDPf3RjoCpY\" image \"https user images.githubusercontent.com 6933510 136196619 0750544f cd6d 4ae3 ace7 60c24443d721.png\" section 5 order 5 title \"Transformations II Composability, Linearity and Nonlinearity\" layout \"layout.jlhtml\" youtube id \"VDPf3RjoCpY\" description \"Let's see what mathematical transformations, inverses, composition and non linearity look like in practice. i.e. applied to philip.jpg \" tags \"lecture\", \"module1\", \"transformation\", \"track math\", \"track julia\", \"inverse\", \"composition\", \"matrix\", \"linear algebra\", \"nonlinear\", \"linear\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end begin using PlutoUI using Colors, ColorVectorSpace, ImageShow, FileIO, ImageIO using PlutoUI using LinearAlgebra using ForwardDiff using NonlinearSolve using StaticArrays end PlutoUI.TableOfContents aside true md\"\"\" Initializing packages When running this notebook for the first time, this could take up to 15 minutes. Hang in there \"\"\" urls corgis \"https user images.githubusercontent.com 6933510 108605549 fb28e180 73b4 11eb 8520 7e29db0cc965.png\", longcorgi \"https user images.githubusercontent.com 6933510 110868198 713faa80 82c8 11eb 8264 d69df4509f49.png\", theteam \"https news.mit.edu sites default files styles news article image gallery public images 202004 edelman%2520philip%2520sanders.png?itok ZcYu9NFeg\", img original load download urls.longcorgi md\"\"\" The fun stuff playing with transforms \"\"\" let range 1.5 .1 1.5 md\"\"\" This is a \"scrubbable\" matrix click on the number and drag to change A `` `` bind a Scrubbable range default 1.0 bind b Scrubbable range default 0.0 `` `` `` `` bind c Scrubbable range default 0.0 bind d Scrubbable range default 1.0 `` `` \"\"\" end md\"\"\" Grab a linear a0afe3ae 76b9 11eb 2301 cde7260ddd7f or nonlinear a290d5e2 7a02 11eb 37db 41bf86b1f3b3 transform, or make up your own \"\"\" md\"\"\" zoom bind z Scrubbable .1 .1 3, default 1 \"\"\" md\"\"\" pan bind panx Scrubbable 1 .1 1, default 0 , bind pany Scrubbable 1 .1 1, default 0 \"\"\" md\"\"\" α bind α Slider 30 .1 30, show value true, default 0 β bind β Slider 10 .1 10, show value true, default 5 h bind h Slider .1 .1 10, show value true, default 5 \"\"\" 1 1 md\"\"\" pixels bind pixels Slider 1 1000, default 800, show value true \"\"\" md\"\"\" Show grid lines bind show grid CheckBox default true ngrid bind ngrid Slider 5 5 20, show value true, default 10 \"\"\" md\"\"\" Circular Frame bind circular CheckBox default true radius bind r Slider .1 .1 1, show value true, default 1 \"\"\" md\"\"\" Above The original image is placed in a 1,1 x 1 1 box and transformed. \"\"\" A a b c d md\"\"\" Pedagogical note Why the Module 1 application image processing Image processing is a great way to learn Julia, some linear algebra, and some nonlinear mathematics. We don't presume the audience will become professional image processors, but we do believe that the principles learned transcend so many applications... and everybody loves playing with their own images \"\"\" md\"\"\" Last Lecture Leftovers \"\"\" md\"\"\" Interesting question about linear transformations If a transformation takes lines into lines and preserves the origin, does it have to be linear? Answer no The example of a perspective map takes all lines into lines, but parallelograms generally do not become parallelograms. \"\"\" md\"\"\" A nice interactive demo of perspective maps https www.khanacademy.org humanities renaissance reformation early renaissance1 beginners renaissance florence a linear perspective interactive from Khan academy. \"\"\" Resource \"https cdn.kastatic.org ka perseus images 1b351a3653c1a12f713ec24f443a95516f916136.jpg\" md\"\"\" Challenge exercise Rewrite this using Julia and Pluto \"\"\" md\"\"\" Julia style a little advanced Reminder about defining vector valued functions \"\"\" md\"\"\" Many people find it hard to read ```julia f v v 1 v 2 , v 1 v 2 or f v v 1 v 2 , v 1 v 2 ``` and instead prefer ```julia f x,y x y , x y or f x,y , x y , x y ``` All four of these will take a 2 vector to a 2 vector in the same way for the purposes of this lecture, i.e. `f 1,2 ` can be defined by any of the four forms. The forms with the ` ` are anonymous functions. They are still considered anonymous, even though we then name them `f`. \"\"\" md\"\"\" Functions with parameters The anonymous form comes in handy when one wants a function to depend on a parameter . For example `f α x,y , x αy, x αy ` allows you to apply the `f 7 ` function to the input vector ` 1, 2 ` by running `f 7 1, 2 ` . \"\"\" md\"\"\" Linear transformations a collection \"\"\" md\"\"\" Here are a few useful linear transformations \"\"\" begin id x, y SA x, y scalex α x, y , SA α x, y scaley α x, y , SA x, α y scale α x, y , SA α x, α y swap x, y SA y, x flipy x, y SA x, y rotate θ x, y , SA cos θ x sin θ y, sin θ x cos θ y shear α x, y , SA x α y, y end T⁻¹ id T⁻¹ rotate α T⁻¹ shear α T⁻¹ lin A uses the scrubbable T⁻¹ shear α ∘ shear α T⁻¹ nonlin shear α T⁻¹ inverse nonlin shear α T⁻¹ nonlin shear α T⁻¹ xy T⁻¹ warp α T⁻¹ x,y , x α y^2,y α x^2 may be non invertible T⁻¹ x,y , x,y^2 T⁻¹ flipy ∘ x,y , β x α y β y , h y β y md\"\"\" In fact we can write down the most general linear transformation in one of two ways \"\"\" begin lin a, b, c, d x, y , a x b y, c x d y lin A v A v... linear algebra version using matrix multiplication end md\"\"\" The second version uses the matrix multiplication notation from linear algebra, which means exactly the same as the first version when A \\begin bmatrix a & b \\\\ c & d \\end bmatrix \"\"\" md\"\"\" Nonlinear transformations a collection \"\"\" translate α,β x, y , SA x α, y β affine, but not linear nonlin shear α x, y , SA x, y α x^2 warp α x, y , rotate α √ x^2 y^2 SA x, y xy r, θ SA r cos θ , r sin θ rθ x SA norm x , atan x 2 ,x 1 exponentialish x,y , log x 1.2 , log y 1.2 merc x,y , log x^2 y^2 2 , atan y,x reim log complex y,x md\"\"\" Composition \"\"\" let x rand these two are the same a sin ∘ cos x b sin cos x a b end md\"\"\" Composing functions in mathematics Wikipedia math https en.wikipedia.org wiki Function composition In math we talk about composing two functions to create a new function the function that takes x to \\sin \\cos x is the composition of the sine function and the cosine function. We humans tend to blur the distinction between the sine function and the value of \\sin x at some point x . The sine function is a mathematical object by itself. It's a thing that can be evaluated at as many x 's as you like. If you look at the two sides of ` sin ∘ cos x ≈ sin cos x ` and see that they are exactly the same, it's time to ask yourself what's a key difference? On the left a function is built ` sin ∘ cos ` which is then evaluated at `x`. On the right, that function is never built. \"\"\" md\"\"\" Composing functions in computer science wikipedia cs https en.wikipedia.org wiki Function composition computer science A key issue is a programming language is whether it's easy to name the composition in that language. In Julia one can create the function `sin ∘ cos` and one can readily check that ` sin ∘ cos x ` always yields the same value as `sin cos x `. \"\"\" md\"\"\" Composing functions in Julia Julia's `∘` operator https docs.julialang.org en v1 manual functions Function composition and piping follows the mathematical typography https en.wikipedia.org wiki Function composition Typography convention, as was shown in the `sin ∘ cos` example above. We can type this symbol as `\\circ TAB `. \"\"\" md\"\"\" Composition of software at a higher level The trend these days is to have higher order composition of functionalities. A good example would be that an optimization can wrap a highly complicated program which might include all kinds of solvers, and still run successfully. This might require the ability of the outer software to have some awareness of the inner software. It can be quite magical when two very different pieces of software \"compose\", i.e. work together. Julia's language construction encourages composability. We will discuss this more in a future lecture. \"\"\" md\"\"\" Find your own examples Take some of the Linear and Nonlinear Transformations see the Table of Contents and find some inverses by placing them in the `T ` section of \"The fun stuff\" at the top of this notebook. \"\"\" md\"\"\" Linear transformations can be written in math using matrix multiplication notation as \\begin pmatrix a & b \\\\ c & d \\end pmatrix \\begin pmatrix x \\\\ y \\end pmatrix . \"\"\" md\"\"\" By contrast, here are a few fun functions that cannot be written as matrix times vector. What characterizes the matrix ones from the non matrix ones? \"\"\" md\"\"\" This may be a little fancy, but we see that warp is a rotation, but the rotation depends on the point where it is applied. \"\"\" begin warp₂ α,x,y rotate α √ x^2 y^2 warp₂ α x, y , warp₂ α,x,y x,y end warp3 α x, y , rotate α √ x^2 y^2 x,y warp3 1 1,2 warp 1 5,6 warp₂ 1.0 5.0,6.0 md\"\"\" Linear transformations See a matrix, think beyond number arrays \"\"\" md\"\"\" Software writers and beginning linear algebra students see a matrix and see a lowly table of numbers. We want you to see a linear transformation that's what professional mathematicians see. \"\"\" md\"\"\" What defines a linear transformation? There are a few equivalent ways of giving a definition. \"\"\" md\"\"\" Linear transformation definitions \"\"\" md\"\"\" The intuitive definition The rectangles gridlines in the transformed image above e0b657ce 7a03 11eb 1f9d f32168cb5394 always become a lattice of congruent parallelograms. The easy operational but devoid of intuition definition A transformation is linear if it is defined by v \\mapsto A v matrix times vector for some fixed matrix A . The scaling and adding definition 1. If you scale and then transform or if you transform and then scale, the result is always the same T cv c \\, T v v is any vector, and c any number. 2. If you add and then transform or vice versa the result is the same T v 1 v 2 T v 1 T v 2 . v 1,v 2 are any vectors. The mathematician's definition A consolidation of the above definition. T is linear if T c 1 v 1 c 2 v 2 c 1 T v 1 c 2 T v 2 for all numbers c 1,c 2 and vectors v 1,v 2 . This can be extended to beyond 2 terms. \"\"\" md\"\"\" The Matrix \"\"\" Resource \"https upload.wikimedia.org wikipedia en c c1 The Matrix Poster.jpg\" md\"\"\" No, not that matrix \"\"\" md\"\"\" The matrix for a linear transformation T is easy to write down The first column is T 1, 0 and the second is T 0,1 . That's it \"\"\" md\"\"\" Once we have those, the linearity relation T x,y x \\, T 1,0 y \\, T 0,1 x \\, \\mathrm column\\ 1 y \\, \\mathrm column\\ 2 is exactly the definition of matrix times vector. Try it. \"\"\" md\"\"\" Matrix multiply You know how to do it, but why? \"\"\" md\"\"\" Did you ever ask yourself why matrix multiply has that somewhat complicated multiplying and adding going on? \"\"\" let A randn 2,2 B randn 2,2 v rand 2 lin A ∘ lin B v , lin A B v end md\"\"\" Important The composition of the linear transformation is the linear transformation of the multiplied matrices There is only one definition of matmul matrix multiply that realizes this fact. To see what it is exactly, remember the first column of `lin A ∘ lin B ` should be the result of computing the two matrix times vectors y A 1,0 then z A y , and the second column is the same for 0,1 . This is worth writing out if you have never done this. \"\"\" md\"\"\" Let's try doing that with random matrices \"\"\" begin P randn 2, 2 Q randn 2, 2 T₁ lin P ∘ lin Q T₂ lin P Q lin P Q 1, 0 , lin P ∘lin Q 1, 0 end test img load download urls.corgis test pixels 300 md\"\"\" `lin P Q ` \"\"\" md\"\"\" `lin P ∘lin Q ` \"\"\" md\"\"\" Coordinate transformations vs object transformations \"\"\" md\"\"\" If you want to move an object to the right, the first thing you might think of is adding 1 to the x coordinate of every point. The other thing you could do is to subtract one from the first coordinate of the coordinate system. The latter is an example of a coordinate transform. \"\"\" md\"\"\" Coordinate transform of an array i, j vs points x, y \"\"\" md\"\"\" The original image has 1,1 in the upper left corner as an array but is thought of as existing in the entire plane. \"\"\" translate 400,400 1,1 md\"\"\" Inverses \"\"\" md\"\"\" If f is a function from 2 vectors to 2 vectors say , we define the inverse of f , denoted f^ 1 , to have the property that it \" undoes \" the effect of f , i.e. f f^ 1 v v and f^ 1 f v v . This equation might be true for all v or for some v in a region. \"\"\" md\"\"\" Example Scaling up and down \"\"\" let v rand 2 T rotate 30 ∘rotate 30 T v , v end let T scale 0.5 ∘ scale 2 v rand 2 T v .≈ v end md\"\"\" We observe numerically that `scale 2 ` and `scale .5 ` are mutually inverse transformations, i.e. each is the inverse of the other. \"\"\" md\"\"\" Inverses Solving equations \"\"\" md\"\"\" What does an inverse really do? Let's think about scaling again. Suppose we scale an input vector \\mathbf x by 2 to get an output vector \\mathbf x \\mathbf y 2 \\mathbf x Now suppose that you want to go backwards. If you are given \\mathbf y , how do you find \\mathbf x ? In this particular case we see that \\mathbf x \\frac 1 2 \\mathbf y . If we have a linear transformation, we can write \\mathbf y A \\, \\mathbf x with a matrix A . If we are given \\mathbf y and want to go backwards to find the \\mathbf x from that, we need to solve a system of linear equations . Usually , but not always , we can solve these equations to find a new matrix B such that \\mathbf x B \\, \\mathbf y , i.e. B undoes the effect of A . Then we have \\mathbf x B \\, A \\mathbf x , so that B A must be the identity matrix. We call B the matrix inverse of A , and write B A^ 1 . For 2 \\times 2 matrices we can write down an explicit formula for the matrix inverse, but in general we will need a computer to run an algorithm to find the inverse. \"\"\" md\"\"\" Inverting Linear Transformations \"\"\" let v rand 2 A randn 2,2 lin inv A ∘ lin A v , v end let A randn 2,2 B randn 2,2 inv A B ≈ inv B inv A end md\"\"\" ``A^ 1 \\begin pmatrix d & b \\\\ c & a \\end pmatrix ad bc \\quad `` if ``\\ A \\ \\begin pmatrix a & b \\\\ c & d \\end pmatrix . `` \"\"\" md\"\"\" Inverting nonlinear transformations \"\"\" md\"\"\" What about if we have a nonlinear transformation T can we invert it? In other words, if \\mathbf y T \\mathbf x , can we solve this to find \\mathbf x in terms of \\mathbf y ? In general this is a difficult question Sometimes we can do so analytically, but usually we cannot. Nonetheless, there are numerical methods that can sometimes solve these equations, for example the Newton method https en.wikipedia.org wiki Newton%27s method . There are several implementations of such methods in Julia, e.g. in the NonlinearSolve.jl package https github.com JuliaComputing NonlinearSolve.jl . We have used that to write a function `inverse` that tries to invert nonlinear transformations of our images. \"\"\" md\"\"\" The Big Diagram of Transforming Images \"\"\" Resource \"https raw.githubusercontent.com mitmath 18S191 Spring21 notebooks week3 comm2.png\" md\"\"\" Note that we are defining the map with the inverse of T so we can go pixel by pixel in the result. \"\"\" md\"\"\" Collisions \"\"\" begin function inverse f, y, u0 SVector 0.0, 0.0 prob NonlinearProblem false u, p f u, p . y, u0 solver solve prob, NewtonRaphson , tol 1e 4 return solver.u end inverse f y inverse u, p f SVector u... , y end md\"\"\" Check out Linear Map Wikipedia https en.wikipedia.org wiki Linear map Transformation Matrix Wikipedia https en.wikipedia.org wiki Transformation matrix \"\"\" md\"\"\" Why are we doing this backwards? If one moves the colors forward rather than backwards you have trouble dealing with the discrete pixels. You may have gaps. You may have multiple colors going to the same pixel. An interpolation scheme or a newton scheme could work for going forwards, but very likely care would be neeeded for a satisfying general result. \"\"\" md\"\"\" Appendix \"\"\" det A det A begin white c RGB RGB 1,1,1 white c RGBA RGBA 1,1,1,0.75 black c RGB RGB 0,0,0 black c RGBA RGBA 0,0,0,0.75 end begin function transform xy to ij img AbstractMatrix, x Float64, y Float64 convert coordinate system xy to ij center image, and use \"white\" when out of the boundary rows, cols size img m max cols, rows function to take xy to ij xy to ij translate rows 2, cols 2 ∘ swap ∘ flipy ∘ scale m 2 apply the function and \"snap to grid\" i, j floor. Int, xy to ij x, y end function getpixel img,i Int,j Int circular Bool false, r Real 200 grab image color or place default rows, cols size img m max cols,rows if circular c i rows 2 ^2 j cols 2 ^2 ≤ r m^2 4 else c true end if 1 i ≤ rows && 1 j ≤ cols && c img i, j else white img 1, 1 black img 1,1 end end function getpixel img,x Float64,y Float64 i,j transform xy to ij img,x,y getpixel img,i,j end function transform ij to xy i Int,j Int,pixels ij to xy scale 2 pixels ∘ flipy ∘ swap ∘ translate pixels 2, pixels 2 ij to xy i,j end end begin begin x, y transform ij to xy i,j, test pixels X, Y T₁ x,y i, j transform xy to ij test img,X,Y getpixel test img,i,j end for i 1 test pixels, j 1 test pixels end begin begin x, y transform ij to xy i,j, test pixels X, Y T₂ x,y i, j transform xy to ij test img,X,Y getpixel test img,i,j end for i 1 test pixels, j 1 test pixels end transform ij to xy 1,1,400 function with gridlines img Array Any,2 n 10 n 2n 1 rows, cols size img result copy img stroke zero eltype img RGBA RGB 1,1,1 , 0.75 stroke RGBA 1, 1, 1, 0.75 result floor. Int, LinRange 1, rows, n , . stroke result ceil. Int,LinRange 1, rows, n , . stroke result , floor. Int, LinRange 1, cols, n . stroke result , ceil. Int,LinRange 1, cols, n . stroke result rows ÷2 , . RGBA 0,1,0,1 result 1 rows ÷2 , . RGBA 0,1,0,1 result , cols ÷2 , . RGBA 1,0,0,1 result , 1 cols ÷2 , . RGBA 1,0,0,1 return result end img if show grid with gridlines img original n ngrid else img original end let x, y transform ij to xy i,j, pixels X, Y translate panx, pany x,y X, Y T⁻¹∘scale 1 z ∘translate panx, pany x,y i, j transform xy to ij img,X,Y getpixel img,i,j circular circular, r r end for i 1 pixels, j 1 pixels transform xy to ij img,0.0,0.0 img size img img 50,56 white background x PlutoUI.ExperimentalLayout.Div x style \"background white\" Resource \"https raw.githubusercontent.com mitmath 18S191 Spring21 notebooks week3 coord transform.png\" | white background Resource \"https raw.githubusercontent.com mitmath 18S191 Spring21 notebooks week3 collide.png\" | white background "},{"url":"images_abstractions/transformations_and_autodiff/","title":"Automatic Differentiation","tags":["lecture","module1","track_julia","track_math","programming","function","transformation","automatic differentiation","continuous","derivative"],"text":" A Pluto.jl notebook v0.19.25 frontmatter chapter 1 video \"https www.youtube.com watch?v AAREeuaKCic\" image \"https user images.githubusercontent.com 6933510 136196632 ad67cb84 a4c9 410e ab72 f4fcfc26f69a.png\" section 3 order 3 title \"Automatic Differentiation\" layout \"layout.jlhtml\" youtube id \"AAREeuaKCic\" description \"We use the package ForwardDiff.jl to automatically differentiate functions, on scalar and vector domains.\" tags \"lecture\", \"module1\", \"track julia\", \"track math\", \"programming\", \"function\", \"transformation\", \"automatic differentiation\", \"continuous\", \"derivative\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end begin using Colors, ColorVectorSpace, ImageShow, FileIO, ImageIO using PlutoUI using HypertextLiteral using LinearAlgebra using ForwardDiff end PlutoUI.TableOfContents aside true md\"\"\" Initializing packages When running this notebook for the first time, this could take up to 15 minutes. Hang in there \"\"\" md\"\"\" Last time, recall we defined linear combinations of images. Remember we scaled an image by multiplying by a constant combined images by adding the colors in each pixel possibly saturating In general if we perform both of these operations, we get a linear combination. \"\"\" md\"\"\" Functions in Math and Julia \"\"\" md\"\"\" Univariate Functions \"\"\" md\"\"\" In high school you learned about univariate functions e.g. f₁ x x^2 f₂ x \\sin x f₃ x x^\\alpha In Julia, functions can be written in short form, anonymous form, or long form. \"\"\" short form f₁ x x^2 subscript unicode \\ 1 tab f₁ 5 anonymous form x sin x x sin x π 2 long form function f₃ x,α 3 default parameter return x^α the \"return\" is optional end f₃ 5 f₃ 5,2 md\"\"\" Keyword arguments After the regular positional arguments, a function definition can also accept keyword arguments. In the definition, these come after a semicolon ` ` \"\"\" f₄ x α, β x β ^α md\"\"\" When calling a function with keyword arguments, you use the key \"\"\" f₄ 3, α 5, β 1 the order of keyword arguments does not matter f₄ 3, β 1, α 5 md\"\"\" See Julia's function documentation https docs.julialang.org en v1 manual functions for more. \"\"\" md\"\"\" Automatic Differentiation of Univariates \"\"\" md\"\"\" Automatic differentiation is a key enabling technology for machine learning and so much of scientific computing. It derives the answer in a manner that is interestingly different from the symbolic differentiation of elementary calculus classes and the numerical differentiation of simple finite differences. See the video at the end of this lecture. \"\"\" ForwardDiff.derivative f₁, 5 ForwardDiff.derivative x f₃ x,3 , 5 md\"\"\" Notice the use of anonymous functions to fix the parameter α 3 \"\"\" md\"\"\" In case you have forgotten what a derivative is, we remind you with a simple finite difference approximation \"\"\" begin md\"\"\" bind e Slider 6 1, default 1, show value true \"\"\" end ϵ 10.0^e sin 1 ϵ sin 1 ϵ , cos 1 , ForwardDiff.derivative sin,1 md\"\"\" Scalar Valued Multivariate Functions \"\"\" md\"\"\" Sometimes we are interested in scalar valued functions of more than 1 variable. This can be written in Julia as a function of many variables or a function of a vector. e.g. f 5 x 5\\sin x 1 x 2 2x 2 4x 3 \"\"\" begin f₅ v 5sin v 1 v 2 2 v 2 4v 3 f₅ x,y,z 5sin x y 2 y 4z end f₅ 1,2,3 , f₅ 1,2,3 md\"\"\" Better yet if you must write it the two ways you probably won't need to, but if you must , don't copy code , reuse code so if it changes in one place it changes everywhere. \"\"\" begin f₆ x,y,z 5sin x y 2 y 4z f₆ v f₆ v 1 ,v 2 ,v 3 end f₆ 1,2,3 , f₆ 1,2,3 md\"\"\" There's one other julia idea that is a trick to make vector code more readable. If you give a tuple argument, the function works directly on vectors but is defined with readable letters. \"\"\" f₇ x,y,z 5sin x y 2 y 4z more readable then 5sin v 1 v 2 2 v 2 4v 3 f₇ 1,2,3 this works with vector arguments, but not scalars f₇ 1,2,3 errros md\"\"\" You can see that the functions f 5 and f 6 has two julia methods, one with one variable, and one with three variables. \"\"\" methods f₅ md\"\"\" Automatic Differentiation Scalar valued multivariate functions \"\"\" md\"\"\" In many applications, including machine learning, one needs to take derivatives of the function in every argument direction. This is known as the gradient . Automatic differentiation works again \"\"\" ForwardDiff.gradient f₅, 1,2,3 md\"\"\" Remember f 5 x 5\\sin x 1 x 2 2x 2 4x 3 \"\"\" md\"\"\" One can check numerically by adding a small change to each of the arguments.m \"\"\" begin ∂f₅∂x f₅ 1 ϵ, 2, 3 f₅ 1, 2, 3 ϵ ∂f₅∂y f₅ 1, 2 ϵ, 3 f₅ 1, 2, 3 ϵ ∂f₅∂z f₅ 1, 2, 3 ϵ f₅ 1, 2, 3 ϵ ∇f ∂f₅∂x , ∂f₅∂y, ∂f₅∂z end md\"\"\" Whether you are an expert at multivariable calculus, or you have never seen this before, I hope seeing it numerically makes the idea intuitive. \"\"\" md\"\"\" Important Remark In machine learning, and other optimization contexts, we want to minimize a scalar function of many parameters known as a \"loss function.\" Following the negative gradient is a standard technique for minimizing functions especially when there are many variables. When there are only a few variables, there are better techniques. \"\"\" md\"\"\" Transformations Vector Valued Multivariate Functions \"\"\" md\"\"\" While scalar functions might technically be called a transformation, it is more common to use the term when both the input and output are multidimensional. \"\"\" md\"\"\" Let us consider a few functions that take in a vector of size 2 and returns a vector of size 2. \"\"\" begin idy x,y x,y lin1 x,y 2x 3y, 5x 4x scalex α x,y , α x, y scaley α x,y , x, α y rot θ x,y , cos θ x sin θ y, sin θ x cos θ y shear α x,y , x α y,y genlin a,b,c,d x,y , a x b y c x d y end rot π 2 4,5 md\"\"\" We bet you have noticed that these functions could all have been defined with matrices. Indeed the general case can be written \"\"\" a b c d x,y md\"\"\" or in math `` \\begin pmatrix a & b \\\\ c & d \\end pmatrix \\begin pmatrix x \\\\ y \\end pmatrix `` . \"\"\" md\"\"\" By contrast here are a few fun functions that can not be written as matrix times vector. What characterizes the matrix ones from the non matrix ones? \"\"\" begin function warp α x,y , begin r √ x^2 y^2 θ α r rot θ x,y end end rθ x norm x , atan x 2 ,x 1 maybe vectors are more readable here? xy r,θ r cos θ , r sin θ end md\"\"\" This may be a little fancy, but we see that warp is a rotation, but the rotation depends on the point where it is applied. \"\"\" begin warp₂ α,x,y rot α √ x^2 y^2 warp₂ α x,y , warp₂ α,x,y x,y end warp 1 5,6 warp₂ 1.0 5.0,6.0 md\"\"\" Automatic Differentiation of Transformations \"\"\" ForwardDiff.jacobian warp 3.0 , 4,5 md\"\"\" What is this thing? \"\"\" begin ∂w∂x warp 3.0 4 ϵ, 5 warp 3.0 4,5 ϵ This is a vector, right? ∂w∂y warp 3.0 4, 5 ϵ warp 3.0 4,5 ϵ This too ∂w∂x ∂w∂y end md\"\"\" But what is a transformation, really? You have very likely learned how to multiply matrices times vectors. I'll bet you think of a matrix as a table of numbers, and a vector as a column of numbers, and if you are well practiced, you know just when to multiply and just when to add. Congratulations, you now can do what computers excel at. \"\"\" md\"\"\" Matrices are often thought of as containers of numbers in a rectangular array, and hence one thinks of manipulating these tables like a spreadsheet, but actually the deeper meaning is that it is a transformation. \"\"\" md\"\"\" α bind α Slider .1 .1 3, show value true \"\"\" let range 1.5 .1 1.5 md\"\"\" This is a \"scrubbable matrix\" click on the number and drag to change. `` `` bind a Scrubbable range default 1.0 bind b Scrubbable range default 0.0 `` `` `` `` bind c Scrubbable range default 0.0 bind d Scrubbable range default 1.0 `` `` Re run this cell to reset to identity transformation \"\"\" end T shear 1 Pick a transformation T genlin a,b,c,d md\"\"\" center zoom bind z Slider .1 .1 3, show value true, default 1 \"\"\" md\"\"\" top left zoom bind f Slider .1 1 3, show value true, default 1 \"\"\" md\"Show grid lines bind show grid CheckBox default true \" A a b c d md\" Det A a d c b det A \" md\"\"\" We never seem to see this in linear algebra classes do we? Check out Linear Map Wikipedia https en.wikipedia.org wiki Linear map Transformation Matrix Wikipedia https en.wikipedia.org wiki Transformation matrix \"\"\" md\"\"\" Geometry of determinant, how areas scale. \"\"\" md\"\"\" Why are we doing this backwards? \"\"\" md\"\"\" Computer Science Solving 2 equations in 2 unknowns, and higher dimensional analogs. The top 500 supercomputers, and how many equations in how many unknowns are being solved today. \"\"\" md\"\"\" Automatic Differentiation in 10 minutes okay, 11 \"\"\" html\"\"\" script src \"https cdn.jsdelivr.net npm lite youtube embed 0.2.0 src lite yt embed.js\" integrity \"sha256 wwYlfEzWnCf2nFlIQptfFKdUmBeH5d3G7C2352FdpWE \" crossorigin \"anonymous\" defer script link rel \"stylesheet\" href \"https cdn.jsdelivr.net npm lite youtube embed 0.2.0 src lite yt embed.css\" integrity \"sha256 99PgDZnzzjO63EyMRZfwIIA i OS2wDx6k 9Eo7JDKo \" crossorigin \"anonymous\" lite youtube videoid vAp6nUMrKYg params \"modestbranding 1&rel 0\" lite youtube \"\"\" md\"\"\" What about more than 3 dimensions? Oh I've heard it all, there is no such thing as more than 3 dimensions. The fourth dimension is time, isn't it? I have trouble visualizing 3 dimensions, let alone contemplating 4. ... but mathematicians have no trouble with n spatial dimensions, and they do not usually worry about silly questions like whether these exist. \"\"\" md\"\"\" Appendix \"\"\" det A det A img sources \"https user images.githubusercontent.com 6933510 108605549 fb28e180 73b4 11eb 8520 7e29db0cc965.png\" \"Corgis\", \"https user images.githubusercontent.com 6933510 108883855 39690f80 7606 11eb 8eb1 e595c6c8d829.png\" \"Arrows\", \"https images.squarespace cdn.com content v1 5cb62a904d546e33119fa495 1589302981165 HHQ2A4JI07C43294HVPD ke17ZwdGBToddI8pDm48kA7bHnZXCqgRu4g0 U7hbNpZw zPPgdn4jUwVcJE1ZvWQUxwkmyExglNqGp0IvTJZamWLI2zvYWH8K3 s 4yszcp2ryTI0HqTOaaUohrI8PISCdr 3EAHMyS8K84wLA7X0UZoBreocI4zSJRMe1GOxcKMshLAGzx4R3EDFOm1kBS fluffy corgi?format 2500w\" \"Long Corgi\" md\"\"\" Choose an image bind img source Select img sources \"\"\" img original load download img source typeof img original begin white c RGB RGB 1,1,1 white c RGBA RGBA 1,1,1,0.75 end function trygetpixel img AbstractMatrix, x Float64, y Float64 rows, cols size img \"The linear map 1,1 ↦ 0,1 \" f t t 1.0 1.0 1.0 i floor Int, rows f y z j floor Int, cols f x rows cols z if 1 i ≤ rows && 1 j ≤ cols img i,j else white img 1,1 end end function with gridlines img Array Any,2 n 16 sep i size img, 1 ÷ n sep j size img, 2 ÷ n result copy img stroke zero eltype img RGBA RGB 1,1,1 , 0.75 stroke RGBA 1, 1, 1, 0.75 result 1 sep i end, . stroke result , 1 sep j end . stroke a second time, to create a line 2 pixels wide result 2 sep i end, . stroke result , 2 sep j end . stroke result sep i n ÷2 . 1,2 , . RGBA 0,1,0,1 result , sep j n ÷2 . 1,2 , . RGBA 1,0,0,1 return result end img if show grid with gridlines img original else img original end if det A 0 RGB 1.0, 1.0, 1.0 else in x, in y A \\ out x, out y in x, in y xy out x, out y in x, in y T out x, out y trygetpixel img, in x, in y end for out y in LinRange f, f, 500 , out x in LinRange f, f, 500 "},{"url":"images_abstractions/transforming_images/","title":"Transformations with Images","tags":["lecture","module1","image","convolution","track_math","matrix","philip"],"text":" A Pluto.jl notebook v0.19.25 frontmatter chapter 1 video \"https www.youtube.com watch?v uZYVjDDZW9A\" image \"https user images.githubusercontent.com 6933510 136196626 194e81c9 00f7 49f6 90c3 09945723b6a3.png\" section 4 order 4 title \"Transformations with Images\" layout \"layout.jlhtml\" youtube id \"uZYVjDDZW9A\" description \"\" tags \"lecture\", \"module1\", \"image\", \"convolution\", \"track math\", \"matrix\", \"philip\" using Markdown using InteractiveUtils This Pluto notebook uses bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of bind gives bound variables a default value instead of an error . macro bind def, element quote local iv try Base.loaded modules Base.PkgId Base.UUID \"6e696c72 6542 2067 7265 42206c756150\" , \"AbstractPlutoDingetjes\" .Bonds.initial value catch b missing end local el esc element global esc def Core.applicable Base.get, el ? Base.get el iv el el end end begin using PlutoUI using Colors, ColorVectorSpace, ImageShow, FileIO, ImageIO using Unitful using ImageFiltering using OffsetArrays using Plots end PlutoUI.TableOfContents aside true md\"\"\" Initializing packages When running this notebook for the first time, this could take up to 15 minutes. Hang in there \"\"\" rotabook PlutoUI.Resource \"https i.gr assets.com images S compressed.photo.goodreads.com books 1348902666l 1646354.jpg\" md\"\"\" Never run overtime a microcentury with UnitFul Running overtime is the one unforgivable error a lecturer can make. After fifty minutes one microcentury as von Neumann used to say everybody's attention will turn elsewhere even if we are trying to prove the Riemann hypothesis. One minute overtime can destroy the best of lectures. from \"Indiscrete Thoughts\" by Rota, Chpt 18, 10 Lessons I Wish I Had Been Taught \"\"\" century 100u\"yr\" a u\"yr\" is a special kind of string denoting a unit of a year century 2 century 200 century^2 g 9.8u\"m\" u\"s\"^2 uconvert u\"minute\", century 1e 6 convert into minutes the value of a microcentury PotentialEnergy 10u\"kg\" g 50u\"m\" uconvert u\"J\",PotentialEnergy md\"\"\" Adding units to numbers just works in Julia, and furthermore, does not slow down execution. We are sneaking in an example of the power of generic programming and Julia's type system, some of the underlying technology that makes us love working with Julia. More on this later in the book. Meanwhile if this helps you do your problem sets in some other class, go for it. \"\"\" md\"\"\" info \"Reminder\" Try your own pictures everywhere \"\"\" md\"\"\" Transforming Images \"\"\" md\"\"\" 2.1. Downsampling Upsampling \"\"\" md\"\"\" How can we pixelate a corgi? Found this cute picture online, but we'll pixelate a real corgi. \"\"\" pixelated corgi load download \"https i.redd.it 99lhfbnwpgd31.png\" philip load download \"https user images.githubusercontent.com 6933510 107239146 dcc3fd00 6a28 11eb 8c7b 41aaf6618935.png\" bind r Slider 1 40, show value true, default 40 downsample philip philip 1 r end, 1 r end upsample philip kron downsample philip, fill 1,r,r md\"\"\" Note the use of kron and fill. See Wikipedia Kron https en.wikipedia.org wiki Kronecker product \"\"\" md\"\"\" Exercise Use the nose selection tool from Section 1.1 to pixelate a rectangle of an image. Warning you'll have to worry about sizes if not exact multiples. \"\"\" md\"\"\" 2.2 Linear Combinations Combining Images \"\"\" md\"\"\" One big idea in mathematics is the linear combination https en.wikipedia.org wiki Linear combination . The idea combines scaling an object combining two or more objects by combining scaled versions of multiple objects. \"\"\" md\"\"\" Let's scale some corgis. \"\"\" corgis load download \"https user images.githubusercontent.com 6933510 108605549 fb28e180 73b4 11eb 8520 7e29db0cc965.png\" bind c Slider 0 .1 3, show value true, default 1 c . corgis scaling the corgis changes intensity md\"\"\" You might wonder about the dot times or pointwise times . You can delete the dot, but it is recommended for clarity and performance. The dot emphasizes that the multiplication by c is happening pixel by pixel or that the scalar is being \"broadcast\" to every pixel. \"\"\" md\"\"\" Scaling too far saturates the image. Any r,g,b ≥ 1, saturates at 1. \"\"\" md\"\"\" We need another image. We could grab one from somewhere or we can just transform the one we have. Let's do the latter and turn the corgis upsidedown. \"\"\" upsidedown corgis corgis end 1 1 , md\"\"\" Now let's scaled version of the two images to see what that does. \"\"\" .5 upsidedown corgis . .5 corgis md\"\"\" Convex Combinations \"\"\" md\"\"\" If all the coefficients are positive and add to 1, we say we have a convex combination . Let's take α and 1 α as the two coefficients adding to 1, and scale the two corgi pictures with different α's, thereby giving different weights to the rightside up and upside down corgis. \"\"\" bind α Slider 0 .01 1 , show value true, default 1.0 α . corgis . 1 α . upsidedown corgis md\"\"\" The moment I did this with α .5, I noticed my brain's tendency to see the rightsisde up corgis even though both have equal weight. For me maybe around α .39 which gives weight .61 to the upside down corgis \"feels\" balanced to me. I think this is what the field of psychology called psychometrics tries to measure perhaps someone can tell me if there are studies of the brain's tendency to use world experience to prefer rightside up corgis, and in particular to put a numerical value to this tendency. \"\"\" md\"\"\" 10 seconds with google and I found there is a thing about faces The Face Inversion effect https en.wikipedia.org wiki Face inversion effect ~ text The%20face%20inversion%20effect%20is,same%20for%20non%2Dfacial%20objects.&text The%20most%20supported%20explanation%20for,is%20the%20configural%20information%20hypothesis and also the Thatcher Effect https en.wikipedia.org wiki Thatcher effect ~ text The%20Thatcher%20effect%20or%20Thatcher,obvious%20in%20an%20upright%20face seems related. ... the article suggests objects don't suffer in the same way as faces, so I put forth that the phenomenon applies to corgi faces as much as human faces, suggesting maybe that corgi faces are processed in the face processing part of the brain,not the object processing part of the brain. Corgis are human, after all, right? Note, this is 5 minutes of armchair science, not a professional opinion. \"\"\" md\"\"\" 2.3 Fun with Photoshop What does \"filter\" mean in this context? \"\"\" md\"\"\" Photshop Filter Reference https helpx.adobe.com photoshop using filter effects reference.html \"\"\" md\"\"\" Let's play with photoshop if for no other reason, let's see what image transformations are available considered useful by the pros. Some worth emphasizing are 1. Blur 2. Sharpen 3. Stylize Find Edges 3. Pixelate 4. Distort Some of these transformations e.g. Blur, Sharpen, Find Edges are examples of convolutions which are very efficient, and show up these days in machine learning particularly in image recognition. \"\"\" md\"\"\" 2.4 Image Filtering convolutions \"\"\" md\"\"\" Last semester Grant Sanderson 3Blue1Brown lectured in this course. This lecture on convolutions in image processing was popular. Let's watch an excerpt from 1 04 to 2 48 . We pick a few exercepts, but we wouldn't blame you if you just wanted to watch the whole video. \"\"\" html\"\"\" script src \"https cdn.jsdelivr.net npm lite youtube embed 0.2.0 src lite yt embed.js\" integrity \"sha256 wwYlfEzWnCf2nFlIQptfFKdUmBeH5d3G7C2352FdpWE \" crossorigin \"anonymous\" defer script link rel \"stylesheet\" href \"https cdn.jsdelivr.net npm lite youtube embed 0.2.0 src lite yt embed.css\" integrity \"sha256 99PgDZnzzjO63EyMRZfwIIA i OS2wDx6k 9Eo7JDKo \" crossorigin \"anonymous\" lite youtube videoid 8rrHTtUzyZA params \"modestbranding 1&rel 0&start 64&end 168\" lite youtube \"\"\" md\"\"\" Definition of convolutions and kernels \"\"\" md\"\"\" Wikipedia Page on Kernels https en.wikipedia.org wiki Kernel image processing Details \"\"\" md\"\"\" Computer Science Complexity The number of multiplications Number of Pixels in the Image Number of Cells in the kernel \"\"\" md\"\"\" Thought Problem Why are small kernels better than large kernels from a complexity viewpoint? \"\"\" md\"\"\" Computer Science Architectures GPUs or Graphical Processing Units Some important computations can be greatly accelerated through the use of specialized hardware such as the GPU processors that were originally designed as image renderers but it has turned out that these processors can be quite fast at other very regular computations. Convolutions is a very GPU friendly operation due to its regular structure. \"\"\" kernelize M OffsetArray M, 1 1, 1 1 begin identity 0 0 0 0 1 0 0 0 0 edge detect 0 1 0 1 4 1 0 1 0 sharpen identity . edge detect Superposition box blur 1 1 1 1 1 1 1 1 1 9 ∇x 1 0 1 1 0 1 1 0 1 2 centered deriv in x ∇y ∇x' kernels identity, edge detect, sharpen, box blur, ∇x, ∇y kernel keys \"identity\", \"edge detect\", \"sharpen\", \"box blur\", \"∇x\", \"∇y\" selections kernel keys . kernel keys kernel matrix Dict kernel keys . kernels md\" bind kernel name Select selections \" end kernel matrix kernel name imfilter corgis, kernelize kernel matrix kernel name Gray. 1.5 . abs. imfilter corgis, kernelize kernel matrix kernel name md\"\"\" Gaussian Filter \"\"\" md\"\"\" In our next Grant Sanderson segment from Fall 2020 4 35 to 7 00 , we hear about convolving images with a Gaussian kernel. \"\"\" html\"\"\" script src \"https cdn.jsdelivr.net npm lite youtube embed 0.2.0 src lite yt embed.js\" integrity \"sha256 wwYlfEzWnCf2nFlIQptfFKdUmBeH5d3G7C2352FdpWE \" crossorigin \"anonymous\" defer script link rel \"stylesheet\" href \"https cdn.jsdelivr.net npm lite youtube embed 0.2.0 src lite yt embed.css\" integrity \"sha256 99PgDZnzzjO63EyMRZfwIIA i OS2wDx6k 9Eo7JDKo \" crossorigin \"anonymous\" lite youtube videoid 8rrHTtUzyZA params \"modestbranding 1&rel 0&start 275&end 420\" lite youtube \"\"\" round. Kernel.gaussian 1 , digits 3 md\"\"\" We could have defined this ourselves with calls to the exponential function. \"\"\" begin G exp i^2 j^2 2 for i 2 2, j 2 2 round. G . sum G , digits 3 end md\"\"\" This is often known as Gaussian blur to emphasize the result of this operation. Adobe on Gaussian blur https www.adobe.com creativecloud photography discover gaussian blur.html . \"\"\" md\"\"\" Focus around 5 23 \"\"\" bind gparam Slider 0 9, show value true, default 1 kernel Kernel.gaussian gparam plotly surface kernel md\"\"\" Note black lines are contours \"\"\" md\"\"\" Computer Science Data Structure Offset Arrays \"\"\" kernel 0,0 kernel 2,2 M 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Z OffsetArray M, 1 1, 2 2 the indices c.I for c ∈ CartesianIndices Z Z 1, 2 md\"\"\" 2.5. Discrete vs Continuous \"\"\" md\"\"\" Some folks only like discrete objects, others continuous. The computer makes clear what many mathematicians already know, that while different language has evolved to describe discrete objects vs continuous objects, often the underlying conceptual idea is similar or the same. Here is one analogy \"\"\" md\"\"\" Blurring Kernels Integrals ≡ Sharpening Kernels Derivatives \"\"\" md\"\"\" Think about integrals vs derivatives in one dimension. If you replace f x with g x ∫ f t dt for x r ≤ t ≤ x r, that will blur or smooth out the features of f. However if you take the derivative,you will emphasize the changes, i.e., you will sharpen or \"edge detect.\" \"\"\" md\"\"\" 2.6 Respect my Boundaries \"\"\" md\"\"\" Applying the convolution on a boundary requires special thought because it is literally an edge case . Once again Grant said this so very well 2 53 4 19 \"\"\" html\"\"\" script src \"https cdn.jsdelivr.net npm lite youtube embed 0.2.0 src lite yt embed.js\" integrity \"sha256 wwYlfEzWnCf2nFlIQptfFKdUmBeH5d3G7C2352FdpWE \" crossorigin \"anonymous\" defer script link rel \"stylesheet\" href \"https cdn.jsdelivr.net npm lite youtube embed 0.2.0 src lite yt embed.css\" integrity \"sha256 99PgDZnzzjO63EyMRZfwIIA i OS2wDx6k 9Eo7JDKo \" crossorigin \"anonymous\" lite youtube videoid 8rrHTtUzyZA params \"modestbranding 1&rel 0&start 173&end 259\" lite youtube \"\"\" "},{"url":"week0/basic_syntax/","title":"basic_syntax","tags":[],"text":" A Pluto.jl notebook v0.19.25 using Markdown using InteractiveUtils md\" Get started with Julia live Before being able to run this notebook successfully locally, you will need to set up Julia and Pluto. Spring21 installation \" md\" Variables We can define a variable using ` ` assignment . Then we can use its value in other expressions \" x 4 y 2x md\"By default Julia displays the output of the last operation. You can suppress the output by adding ` ` a semicolon at the end. \" md\"We can ask what type a variable has using `typeof` \" typeof y md\" Functions\" md\"We can use a short form, one line function definition for simple functions \" f x 2 x md\"Typing the function's name gives information about the function. To call it we must use parentheses \" f f 10 md\"For longer functions we use the following syntax with the `function` keyword and `end` \" function g x, y z x y return z^2 end g 1, 2 md\" For loops\" md\"Use `for` to loop through a pre determined set of values \" let s 0 for i in 1 10 s i Equivalent to s s i end s end md\"Here, `1 10` is a range representing the numbers from 1 to 10 \" typeof 1 10 md\"Above we used a `let` block to define a new local variable `s`. But blocks of code like this are usually better inside functions, so that they can be reused. For example, we could rewrite the above as follows \" function mysum n s 0 for i in 1 n s i end return s end mysum 100 md\" Conditionals `if`\" md\"We can evaluate whether a condition is true or not by simply writing the condition \" a 3 a 5 md\"We see that conditions have a Boolean `true` or `false` value. We can then use `if` to control what we do based on that value \" if a 5 \"small\" else \"big\" end md\"\"\"Note that the `if` also returns the last value that was evaluated, in this case the string `\"small\"` or `\"big\"`, Since Pluto is reactive, changing the definition of `a` above will automatically cause this to be reevaluated \"\"\" md\" Arrays\" md\" 1D arrays `Vector`s \" md\"We can make a `Vector` 1 dimensional, or 1D array using square brackets \" v 1, 2, 3 typeof v md\"The `1` in the type shows that this is a 1D array. We access elements also using square brackets \" v 2 v 2 10 md\"Note that Pluto does not automatically update cells when you modify elements of an array, but the value does change.\" md\"A nice way to create `Vector`s following a certain pattern is to use an array comprehension \" v2 i^2 for i in 1 10 md\" 2D arrays matrices \" md\"We can make small matrices 2D arrays with square brackets too \" M 1 2 3 4 typeof M md\"The `2` in the type confirms that this is a 2D array.\" md\"This won't work for larger matrices, though. For that we can use e.g.\" zeros 5, 5 md\"Note that `zeros` gives `Float64`s by default. We can also specify a type for the elements \" zeros Int, 4, 5 md\"We can then fill in the values we want by manipulating the elements, e.g. with a `for` loop.\" md\"A nice alternative syntax to create matrices following a certain pattern is an array comprehension with a double `for` loop \" i j for i in 1 5, j in 1 6 "},{"url":"week0/plots_tutorial/","title":"plots_tutorial","tags":[],"text":" A Pluto.jl notebook v0.19.25 using Markdown using InteractiveUtils using Plots using SpecialFunctions using VegaLite, VegaDatasets using DataFrames using PlutoUI md\"\"\" Resources Plots Docs Useful Tips https docs.juliaplots.org latest basics Useful Tips Plots Docs Examples https docs.juliaplots.org latest generated gr Plot Attributes http docs.juliaplots.org latest generated attributes plot Axis Attributes http docs.juliaplots.org latest generated attributes axis Axis Color Names http juliagraphics.github.io Colors.jl stable namedcolors \"\"\" md\"\"\" Loading Time Plots loading time sucks big time. This is a known problem. We know, we know, Julia is fast, just grab some coffee .... ☕☕☕☕☕☕☕☕☕ \"\"\" md\"\"\" Hello World \"\"\" plot rand 4 md\"\"\" Adding Stuff \"\"\" begin plot rand 4 scatter rand 4 end md\"\"\" Removing Stuff \"\"\" plot legend false, axis false, grid false, ticks false md\"\"\" Lines and points \"\"\" md\"\"\" Square Aspect Ratio \"\"\" begin v rand 4 plot v, ratio 1, legend false scatter v end md\"\"\" Matrices with color heatmap yflip true places the 2,1 entry where you want it, since you want to interchange xy with ij and i runs down and y runs up. \"\"\" A 1 1000 1 1 1 1 1 1 1 heatmap A, ratio 1, yflip true, legend false, axis false, grid false, ticks false heatmap rand 10,10 , clim 0,1 , ratio 1, legend false, axis false, ticks false begin MM 0 1 0 0 0 0 1 0 0 whiteblack RGBA 1,1,1,0 , RGB 0,0,0 heatmap c whiteblack, MM, aspect ratio 1, ticks .5 3.5, lims .5,3.5 , gridalpha 1, legend false, axis false, ylabel \"i\", xlabel \"j\" end begin p plot 1 4,guideposition top end begin p.attr foreground color RGB 1,0,0 p.attr foreground color end p begin q p.series list 1 .plotattributes q.explicit linecolor green end p md\"\"\" Colors \"\"\" Colors.color names mycolors colorant\"lightslateblue\",colorant\"limegreen\",colorant\"red\" begin AA i for i 50 300, j 1 100 heatmap AA, c mycolors, clim 1,300 end md\"\"\" Area under curves \"\"\" begin y rand 10 plot y, fillrange y. 0 . .5, label \"above below 1 2\", legend topleft end begin x LinRange 0,2,100 y1 exp. x y2 exp. 1.3 . x plot x, y1, fillrange y2, fillalpha 0.35, c 1, label \"Confidence band\", legend topleft end let x 3 .01 3 areaplot x, exp. x.^2 2 √ 2π ,alpha .25,legend false end begin M 1 2 3 7 8 9 4 5 6 0 .5 1.5 areaplot 1 3, M, seriescolor red green blue , fillalpha 0.2 0.3 0.4 end let f x exp x^2 2 √ 2π δ .01 plot x √2 . erfinv. 2 . δ 2 δ 1 . 1 areaplot x, f. x , seriescolor red, blue , legend false plot f, x,c black end md\"\"\" Shapes \"\"\" begin rectangle w, h, x, y Shape x . 0,w,w,0 , y . 0,0,h,h circle r,x,y θ LinRange 0,2π,500 x. r. cos. θ , y. r. sin. θ end begin plot circle 5,0,0 , ratio 1, c red, fill true plot rectangle 5 √2,5 √2, 2.5 √2, 2.5 √2 ,c white,fill true,legend false end md\"\"\" Editing Plots manually \"\"\" pl plot 1 4, 1, 4, 9, 16 pl.attr pl.series list 1 pl size 300,200 pl md\"\"\" VegaLite \"\"\" vlplot point, rand 10 , rand 10 begin dataset \"zipcodes\" | vlplot circle, width 500, height 300, transform calculate \"substring datum.zip code, 0, 1 \", as digit , projection type albersUsa , longitude longitude, latitude latitude, size value 1 , color \"digit n\" end d DataFrame dataset \"zipcodes\" scatter d , longitude , d , latitude , m ., ms 1, xlim 150, 50 , ylim 20,55 begin struct RankOneMatrix T v AbstractVector T w AbstractVector T end end RankOneMatrix rand 3 , rand 3 methods RankOneMatrix begin xx .1 .1 1 plot xx.^2, xaxis log, yaxis log end begin plot exp. x , yaxis log end TableOfContents "}]