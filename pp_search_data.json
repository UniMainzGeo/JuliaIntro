[{"url":"Basic_Operations/","title":"Basic mathematics","tags":["Basics"],"text":" A Pluto.jl notebook v0.19.25 frontmatter Authors \"Pascal Aellig\" title \"Basic mathematics\" tags \"Basics\" license \"MIT\" description \"This is the first step towards programming in Julia\" layout \"layout.jlhtml\" using Markdown using InteractiveUtils begin using Colors, ColorVectorSpace, ImageShow, FileIO, ImageIO using PlutoUI using PlutoTeachingTools using Printf using HypertextLiteral using WGLMakie using Plots end md\" Basic Julia operations and plotting\" md\"In this notebook you will learn how Julia calculates and start plotting your own function Do to this online environment, some things are different than in VS Code. For example Rather than overwriting a variable, it disables the cell above. So be advised to give a new name when computing. Multi line codes that are not a function must have begin your lines end to ensure Pluto runs it correctly. Otherwise you can always split the cells\" md\" 1. Basic operations Julia is a scientific programming language, which means that it is designed to be used for mathematical operations. Try out the following operations \" 1 1 try for yourself 3 4 12 4 3^2 md\"Powers are performed before divisions and multiplications, which are done before subtraction and addition\" 2 4 5^2 md\"In VS Code you can also use the 'command line editiing' tool that allows you to go up and down with the keyboard arrows. Which can safe quite some time for long calculations, such as above\" 2 4 5^2 2 md\" In Julia use the equal sign to assign values to variables. This should be known from other programming languages.\" x 1 1 md\"To find out what the type of a certain variable is, type \" typeof x md\"What type will you get for x if it has decimals?\" a 2.1 typeof a md\"The cool part about this Pluto notebook is that if you change a variable, it automatically updates the cells below. Try it for yourself\" c 10 md\"Update `c` accordingly to get b 1000\" b c 100 if b 1000 correct md\"Nice, now move on to vektors\" else keep working end md\" 2. Vectors\" md\" Until now you've dealt with scalar values. Now its time to work on Vectors\" m 0 .1 2 md\"If you want to retrieve a specific value of the vector, lets say the third 3. do it like this \" m 3 md\"Julia arrays start at 1\" m 1 md\"You can now do some random calculations with x as we did with b with the scalars.\" y m.^2 . 1 md\"Note the dot . here, which tells julia that every entry of x should be squared and 1 is added. If you want a vector with values, they should be separated by commas \" k 1.2, 3, 5, 6 md\" 3 Matrixes\" md\"A matrix in julia can be defined as \" n 1 2 3 4 5 6 md\"Note that the elements of a matrix being entered are enclosed by brackets a matrix is entered in “row major order” i.e. all of the first row, then all of the second row, etc rows are separated by a semicolon or a newline , and the elements of the row should be separated by a space. The element in the i’th row and j’th column of a is referred to in the usual way \" n 1,2 md\"The transpose of a matrix is the result of interchanging rows and columns. Julia denotes the transpose by folowing the matrix with the single quote apostrophe .\" n' md\"New matrices may be formed out of old ones, in many ways.\" r n 7 8 9 n n n n n n md\"There are many built. in matrix constructions. Here are a few \" rand 1,3 rand 2 zeros 3 ones 3,2 md\"Use a semicolon to suppress output within the REPL \" s zeros 20,30 md\"This is useful, when working with large matrices. An often used part of Julia is the ‘colon operator,’ which produces a list.\" 3 3 md\"The default increment is by 1, but that can be changed.\" q 3 .4 3 md\"This can be read x is the name of the list, which begins at 3 with a constant increase of 0.4 until it reaches and surpasses 3. You can think of x as a list, a vector, or a matrix, its up to you. If you'd like, you can even use this to extract 'subvectors', as follows.\" q 4 8 q 9 2 1 u 10 100 u 40 5 60 md\"The colon notation can also be combined with the earlier method of constructing matrices.\" g 1 6 2 7 4 9 md\"The colon notation can also be combined with the earlier method of constructing matrices.\" xx 1 6 2 7 4 9 md\"A very common use of the colon notation is to extract rows, or columns, as a sort of “wild card” operator which produces a default list. The following command demonstrates this\" yy rand 10,5 s 6 7,2 4 md\"Matrices may also be constructed by programming. Here is an example, creating a ‘program loop.’, which shows how\" A i j for i 1 10,j 1 11 md\"Notice how you can add multiple for statements of variables into one for loop? Cool right?\" correct md\"You made it, already halfway\" md\" 4. Matrix arithmetic\" begin a2 1 2 3 4 5 6 7 8 10 b2 1 1 1 ' end md\"Scalars multiply matrices as expected, and matrices may be added in the usual way both are done ’element by element.’\" 2 a2, a2 4 md\"Scalars added to matrices require you to add a dot, as\" a2. 1 md\"Matrix multiplication requires that the sizes match. If they don’t, an error message is generated.\" a2 b2 a2 b2' md\"A matrix matrix multiplication is done with \" a2 a2 md\"whereas adding a dot performs a pointwise multiplication \" a2. a2 correct md\"Nice Now lets plot and visualise something\" md\" 5. Plotting\" md\" 5.1 Adding plotting packages As you already learned in the installation guide, Julia has an internal package manager, where you can add different packages. Now we want to plot something, therefore we need Plots.jl or Makie.jl ```julia julia v1.9 pkg add Plots, Makie ``` Once the installation is done, you can test whether the package works by running the build in testing suite of that package which is available for most julia packages . When running it from VS Code, this can take a looong time, depending on your machine. If you get impatient, you can stop this with CTRL C. Once you are done with the package manager, go back to the REPL with the backspace button. However as we now run it on a Pluto notebook, we have already set it up. That's the reason why it took so long to load at the beginning. \" md\" 3.2 Plotting Now lets create our first plot ```julia julia plot x,y ```\" t 0 .1 2 w t.^2 . 1 plot t,w, xlabel \"x\", ylabel \"y axis\", title \"my first plot\",label none, color red almost md\"Oops, we are currently using two packages that have a function called `plot `. You need to specify which one you want by `Plots.plot ` \" Plots.plot t,w, xlabel \"x\", ylabel \"y axis\", title \"my first plot\",label none, color red md\"There are lots of options within the plotting package. Have a look at the tutorial here https docs.juliaplots.org latest . If you are used to work with MATLAB Octave, here a quick summary of how plotting options are called in the Plots.jl package of julia MATLAB | Julia | plot x,y,‘r–’ | plot x,y,linestyle dash, color red scatter x,y | scatter x,y mesh x,y,z | wireframe x,y,z surf x,y,z | plot x,y,z,st surface pcolor x,y,z | heatmap x,y,z contour x,y,z,50 | contour x,y,z,level 50 contourf x,y,z | contour x,y,z,level 50,fill true \" md\" 7. Functions\" f x x.^2 . 10 md\"You can now use this function with scalars, vectors or arrays \" f 10 l 1 3 f l p 1 2 3 4 f p md\"Functions of course don’t have to be one liners, so you can also define it as \" function f1 x y x.^2 . 11 return y end x3 1 1e6 md\"It turns out that julia has a handy macro, called ` time`, with which you can record the time that a function took.\" time f1 x3 md\"As you can see, the function runs super quick. That's because the code is precompiled and only needs to run the function, which creates 2 allocations. Also note that you need to restart the REPL on VS Code or your Julia session every time you redefine a function or a structure.\" md\" 8. Scripts\" md\"In general, you want to put your code in a julia script so you don’t have to type it always in the REPL. Doing that is simple you simple save it as a textfile that had has .jl as an ending. Note When working in scripts you need to state what packages you want to use at the beginning with `using Plots` etc. A simple example is the following script \" begin function rosenbrock x,y a 1,b 100 xt x' transpose f a . xt .^2 . b. y . xt.^2 .^2 return f end x5 range 2.0,2.0,length 50 y5 range 1.0,1.5,length 50 t1 rosenbrock x5,y5 Create a contourplot Plots.contour x5,y5,t1, levels 0 10 200, fill true, xlabel \"X\", ylabel \"y\", title \"rosenbrock\", color roma, clim 1,200 end md\"Note that the rosenbrock function has optional parameters a,b . Calling it with only X,Y will invoke the default parameters, but you can specify the optional ones with f rosenbrock x,y, b 200,a 3 . You can save this as a script and run it in the julia REPL in the following way \" md\"`include ` Note Within the Parantheses, there must be quotation marks \" md\"Be aware that you need to be in the same directory as the script see below on how you can change directories using the build in shell in julia, by typing in the REPL . The result looks like have a look at how we customized the colormap, and added info for the axes .\" md\" 9. Help\" md\"In general, you can get help for every function by typing `?` which brings you to the help terminal. Next type the name of the function. For example, lets find out how to compute the average of an array ```julia julia ?mean ``` You can add help info to your own functions by adding comments before the function, using quotation marks.\" \"\"\" y f2 withhelp x Computes the square of `x` and adds 10 Example julia x 1 10 julia y f2 withhelp x 10 element Vector Int64 11 14 19 26 35 46 59 74 91 110 \"\"\" function f2 withhelp x y x.^2 . 10 return y end md\" 9.1 Built in terminal\" md\"Julia has a built in terminal, which you can reach by typing . This comes in handy if you want to check in which directory you are, change directories, or look at the files there. ```julia julia shell pwd Users kausb ``` Note that this invokes the default terminal on your operating system, so under windows the commands are a but different than under linux. Once you are done with the terminal, you get back to the REPL, by using the backspace. 9.2 Online help The official julia manual https docs.julialang.org en v1 is a good place to start. Many of the julia packages are hosted on github and have help pages as well. An example, which we will use here, is GeophysicalModelGenerator.jl https github.com JuliaGeodynamics GeophysicalModelGenerator.jl` .\" TableOfContents title \"Introduction to Julia by AG Geophysik at the University of Mainz\", indent true, depth 4, aside true "},{"url":"GMG_Importing_Data/","title":"Importing Data","tags":["GMG","lecture"],"text":" A Pluto.jl notebook v0.19.25 frontmatter chapter \"1\" Authors \"Pascal Aellig\" title \"Importing Data\" section \"2\" order \"2\" tags \"GMG\", \"lecture\" layout \"layout.jlhtml\" description \"Importing Data\" License \"MIT\" using Markdown using InteractiveUtils md\" Importing Data DISCLAIMER THIS PART IS TAKEN FROM THE GMG TUTORIAL OF M.THIELMANN UNI BAYREUTH 1. Data sources Before you can use GMG, you obviously need data. Given the different kinds of data available, there is a multitude of sources. Here, we list some of them that may be useful in the future MB4D Data Repository https dataservices.gfz potsdam.de 4dmb Repository for data obtained within SPP 4DMB ETOPO1 https www.ncei.noaa.gov products etopo global relief model Global relief data with a resolution of 1 arc minute IRIS Earth Model Collaboration http ds.iris.edu ds products emc earthmodels Different Earth Models, in particular a large collection of seismic tomographies our own database https seafile.rlp.net d 22b0fb85550240758552 a collection of different data which we have already processed with GMG and many more… A lot of data is also not available via dedicated repositories, but via more general repositories such as Zenodo or even hosted on private websites. For the purpose of this tutorial, we will now focus on data from seismic tomographies. For the European Alps, there are several datasets which are freely available. Here, we will use the dataset by Paffrath et al. which uses AlpArray data. The data is available for download in a public repository https doi.org 10.5880 fidgeo.2021.032 Paffrath, M., Friederich, W., and the AlpArray and AlpArray Swath D working group Imaging structure and geometry of slabs in the greater Alpine area – A P wave traveltime tomography using AlpArray Seismic Network data, Solid Earth Discuss., https doi.org 10.5194 se 12 2671 2021 https doi.org 10.5194 se 12 2671 2021 , 2021.\" md\" 2. Importing tomographic data given as ASCII file\" "},{"url":"GMG_Package_description/","title":"Package Description","tags":["GMG","lecture"],"text":" A Pluto.jl notebook v0.19.25 frontmatter chapter \"1\" Authors \"Pascal Aellig\" section \"1\" order \"1\" title \"Package Description\" tags \"GMG\", \"lecture\" layout \"layout.jlhtml\" description \"Package Description\" License \"MIT\" using Markdown using InteractiveUtils md\" Package Description 1. What is the Geophysical Model Generator? The idea for the Geophysical Model Generator was born out of the need to view different geophysical datasets e.g. tomographies, gravity measurements, receiver functions and others in a single joint manner without having to resort to specifically programmed visualization routines for each case. The Geophysical Model Generator is NOT a single program, but can rather be seen as a set of tools written in julia that allow to import and modify different datasets and transfer them to a common data structure. This common data structure then allows to process and visualize the different datasets in a coherent manner, thus facilitating comparisons and interpretations. In addition, the GMG provides tools to assist numerical modellers in creating input models from these datasets. For this, the julia module GeophysicalModelGenerator.jl provides the following functionality A consistent GeoData structure, that holds the data along with lon lat depth information. Routines to generate VTK files from the GeoData structure in order to visualize results in Paraview. The ability to deal with points, 2D profiles and 3D volumes, for both scalar and vector values. Rapidly import screenshots of published papers compare them with other data sets in 3D using paraview. Create geodynamic input models for LaMEM 2. Installation To install GeophysicalModelGenerator.jl, start julia and go to the package manager ```julia julia v1.9 pkg add GeophysicalModelGenerator ``` This will automatically install various other packages it relies on using the correct version . If you want, you can test if it works on your machine by running the test suite in the package manager ```julia julia v1.9 pkg test GeophysicalModelGenerator ``` Note that we run these tests automatically on Windows, Linux and Mac every time we add a new feature to GeophysicalModelGenerator using different julia versions . This Continuous Integration CI ensures that new features do not break others in the package. The results can be seen here. The installation of GMG only needs to be done once, and will precompile the package and all other dependencies. If you, at a later stage, want to upgrade to the latest version of GMG, you can type ```julia julia v1.9 pkg update GeophysicalModelGenerator ``` You can load GeophysicalModelGenerator, for example to create cross sections, with ```julia julia using GeophysicalModelGenerator ``` 3. Dependencies We rely on a number of additional packages. All of them are automatically installed, except GeoParams.jl, which you currenty have to add yourself, again using the package manager. GeoParams.jl https github.com JuliaGeodynamics GeoParams.jl Defines dimensional units, and makes it easy to convert for km s to m s, etc. WriteVTK.jl https github.com JuliaVTK WriteVTK.jl writes VTK files to be opened with Paraview . ImageIO.jl https github.com JuliaIO ImageIO.jl , FileIO.jl https github.com JuliaIO FileIO.jl , Colors.jl https github.com JuliaGraphics Colors.jl to import screenshots from papers. Interpolations.jl https github.com JuliaMath Interpolations.jl for interpolations for example related to importing screenshots .\" "},{"url":"GMT/","title":"Exercise of GMG","tags":["GMG","lecture"],"text":" A Pluto.jl notebook v0.19.25 frontmatter chapter \"1\" Authors \"Pascal Aellig\" section \"3\" order \"3\" title \"Exercise of GMG\" tags \"GMG\", \"lecture\" license \"MIT\" description \"This is the first step towards programming in Julia\" layout \"layout.jlhtml\" using Markdown using InteractiveUtils begin using Colors, ColorVectorSpace, ImageShow, FileIO, ImageIO using PlutoUI using PlutoTeachingTools using Printf using HypertextLiteral end begin using GMT using GeophysicalModelGenerator using GLMakie end begin using WGLMakie heatmap rand 20 end md\" Test of GMG with GMT in Pluto WIP \" md\" DISCLAIMER This webpage is a work in progress and if you got recommendations, feel free to email us mailto paellig uni mainz.de \\ Furthermore, this Introduction was inspired by the MIT Computational Thinking class and Marcel Thielmanns's course on the Geophysical Model Generator Uni Bayreuth\" Topo ImportTopo lon 18.7, 17.1 , lat 28.0, 29.2 , file \" earth relief 03s.grd\" begin N 60 function xy data x, y r sqrt x^2 y^2 r 0.0 ? 1f0 sin r r end l range 10, stop 10, length N z Float32 xy data x, y for x in l, y in l surface 1..1, 1..1, z, colormap Spectral end heatmap rand 20 App do session Session n 10 index slider Slider 1 n volume rand n, n, n slice map index slider do idx return volume , , idx end fig Figure ax, cplot contour fig 1, 1 , volume rectplot linesegments ax, Rect 1, 1, 12, 12 , linewidth 2, color red on index slider do idx translate rectplot, 0,0,idx end heatmap fig 1, 2 , slice slider DOM.div \"z index \", index slider, index slider.value return JSServe.record states session, DOM.div slider, fig end "},{"url":"cheatsheets/","title":"Cheatsheets","tags":["welcome"],"text":"Cheatsheets Getting Started with Julia - live . Fastrack to Julia  cheatsheet. MATLAB-Julia-Python comparative cheatsheet  by  QuantEcon group Plots.jl cheatsheet"},{"url":".","title":"index","tags":["homepage"],"text":""},{"url":"installation_Pluto/","title":"Introduction and Installation","tags":["welcome"],"text":" A Pluto.jl notebook v0.19.25 frontmatter title \"Introduction and Installation\" tags \"welcome\" license \"MIT\" description \"This is the first step towards programming in Julia\" layout \"layout.jlhtml\" using Markdown using InteractiveUtils md\" Introduction to Julia by AG Geophysik at the University of Mainz\" md\" DISCLAIMER This webpage is a work in progress and if you got recommendations, feel free to email us mailto paellig uni mainz.de \\ Furthermore, this Introduction was inspired by the MIT Computational Thinking class and Marcel Thielmanns's course on the Geophysical Model Generator Uni Bayreuth\" md\" 1. Introduction\" md\"The Julia scientific programming language is fast, completely open source and comes with a nice package manager. It works on essentially all systems and has an extremely active user base. Programming in Julia is fairly easy and comparable to programming in MATLAB. If you have experience in MATLAB programming, transitioning to Julia should be relatively smooth.\" md\"In this course you will learn how to use Julia from simple coding exercises to get familiar with the structure of Julia to interactive geodynamical programming using LaMeM and other packages developed by the AG Geophysik at the University of Mainz\" md\" 1.1 Installation of Julia\" md\" Step 1 Download Julia Go to https julialang.org downloads https julialang.org downloads and download the current stable release, using the correct version for your operating system Linux x86, Mac, Windows, etc . Additionally, we rely on Microsoft Visual Studio Code https code.visualstudio.com as a debugger and visualisation tool. After downloading both Julia and VS Code, make sure to also install the Julia Language extension within VS Code. See here https code.visualstudio.com docs languages julia for help when setting it up. Step 2 Run Julia After installing, make sure that you can run Julia . On some systems, this means searching for the program installed on your computer in others, it means running the command `julia` in a terminal. Make sure that you can execute `1 1` Step 3 Install Pluto https github.com fonsp Pluto.jl Next we will install the Pluto https github.com fonsp Pluto.jl , the notebook environment that we will be using during the course. Pluto is a Julia programming environment designed for interactivity and quick experiments. Open the Julia REPL . This is the command line interface to Julia, similar to the previous screenshot. Here you type Julia commands , and when you press ENTER, it runs, and you see the result. To install Pluto, we want to run a package manager command . To switch from Julia mode to Pkg mode, type ` ` closing square bracket at the `julia ` prompt. ```julia julia v1.9 pkg add Pluto ``` This might take a couple minutes to download all the dependencies. If you do not want to continue to work on the notebook, you can close the Terminal now. Step 4 Run Pluto on a modern Browser Viewing Pluto notebooks require a modern browser. The notebooks work best on Mozilla Firefox or Google Chrome, however Safari is also operational. Step 5 Starting Pluto and running the interactive notebooks Before we are able to run the notebooks, we need to open the Julia REPL if you closed it after step 3 and load Pluto and type PLuto.run . ```julia julia using Pluto julia Pluto.run ``` The terminal will tell you the URL e.g. http localhost 1234 and open a browser window on its own. \" "},{"url":"search/","title":"Search results","tags":[],"text":"window.init_search(); Search Results \nLoading..."},{"url":"sidebar data/","title":"sidebar data","tags":[],"text":"Dict \"main\" \"Welcome\" collections \"welcome\" .pages, \"Getting familiar with Julia\" collections \"Basics\" .pages, \"GeophysicalModelGenerator.jl\" collections \"GMG\" .pages, \"Module 3 Climate Science\" collections \"module3\" .pages, , "},{"url":"structure/","title":"structure","tags":[],"text":""}]